// –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Railway
const { Client } = require("pg");

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
const DATABASE_URL = process.env.DATABASE_PUBLIC_URL || process.env.DATABASE_URL;

if (!DATABASE_URL) {
  console.error("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
  console.log("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway:");
  console.log("- DATABASE_URL");
  console.log("- DATABASE_PUBLIC_URL");
  process.exit(1);
}

async function setupRailwayDatabase() {
  console.log("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Railway...");
  console.log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: ${DATABASE_URL.replace(/:[^:@]+@/, ':***@')}`);

  const client = new Client({
    connectionString: DATABASE_URL,
    ssl: { rejectUnauthorized: false }
  });

  try {
    await client.connect();
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ");

    // –ú–∏–≥—Ä–∞—Ü–∏—è 1: –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log("\nüîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é 1: –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...");
    await client.query(`
      -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      CREATE TABLE IF NOT EXISTS "User" (
          id SERIAL PRIMARY KEY,
          "tgId" TEXT UNIQUE NOT NULL,
          "createdAt" TIMESTAMP DEFAULT now()
      );

      -- –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ
      CREATE TABLE IF NOT EXISTS "FoodEntry" (
          id SERIAL PRIMARY KEY,
          "userId" INTEGER NOT NULL REFERENCES "User"(id) ON DELETE CASCADE,
          date TIMESTAMP NOT NULL,
          "textRaw" TEXT NOT NULL,
          "createdAt" TIMESTAMP DEFAULT now()
      );

      -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
      CREATE INDEX IF NOT EXISTS idx_user_tgid ON "User"("tgId");
      CREATE INDEX IF NOT EXISTS idx_foodentry_userid ON "FoodEntry"("userId");
      CREATE INDEX IF NOT EXISTS idx_foodentry_date ON "FoodEntry"(date);
    `);
    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è 1 –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

    // –ú–∏–≥—Ä–∞—Ü–∏—è 2: –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∫—ç—à
    console.log("\nüîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é 2: –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏...");
    await client.query(`
      -- –¢–∞–±–ª–∏—Ü–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ –∑–∞–ø–∏—Å–∏
      CREATE TABLE IF NOT EXISTS food_items (
          id SERIAL PRIMARY KEY,
          entry_id INT NOT NULL REFERENCES "FoodEntry"(id) ON DELETE CASCADE,
          name TEXT NOT NULL,
          qty NUMERIC NOT NULL,
          unit TEXT NOT NULL,
          resolved_grams NUMERIC NOT NULL,
          kcal NUMERIC NOT NULL,
          p NUMERIC NOT NULL,
          f NUMERIC NOT NULL,
          c NUMERIC NOT NULL,
          fiber NUMERIC NOT NULL,
          edited_by_user BOOLEAN DEFAULT FALSE,
          created_at TIMESTAMP DEFAULT now()
      );

      CREATE INDEX IF NOT EXISTS idx_food_items_entry_id ON food_items(entry_id);

      -- –ö—ç—à –¥–ª—è LLM-–æ—Ç–≤–µ—Ç–æ–≤
      CREATE TABLE IF NOT EXISTS llm_cache (
          id SERIAL PRIMARY KEY,
          key_hash TEXT UNIQUE NOT NULL,
          payload_json JSONB NOT NULL,
          created_at TIMESTAMP DEFAULT now()
      );

      CREATE INDEX IF NOT EXISTS idx_llm_cache_key_hash ON llm_cache(key_hash);
    `);
    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è 2 –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

    // –ú–∏–≥—Ä–∞—Ü–∏—è 3: –ú–µ—Ç—Ä–∏–∫–∏
    console.log("\nüîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é 3: –ú–µ—Ç—Ä–∏–∫–∏...");
    await client.query(`
      -- –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è MVP
      CREATE TABLE IF NOT EXISTS metrics_events (
          id SERIAL PRIMARY KEY,
          user_tg_id TEXT NOT NULL,
          kind TEXT NOT NULL,
          latency_ms INTEGER NOT NULL,
          created_at TIMESTAMP DEFAULT now()
      );

      CREATE INDEX IF NOT EXISTS idx_metrics_user_tg_id ON metrics_events(user_tg_id);
      CREATE INDEX IF NOT EXISTS idx_metrics_created_at ON metrics_events(created_at);
      CREATE INDEX IF NOT EXISTS idx_metrics_kind ON metrics_events(kind);
    `);
    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è 3 –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

    // –ú–∏–≥—Ä–∞—Ü–∏—è 4: –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã
    console.log("\nüîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é 4: –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã...");
    await client.query(`
      -- –°–æ–∑–¥–∞–µ–º enum –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞—è–≤–æ–∫
      DO $$ BEGIN
          CREATE TYPE request_status AS ENUM ('new', 'in_progress', 'done', 'rejected');
      EXCEPTION
          WHEN duplicate_object THEN null;
      END $$;

      -- –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã
      CREATE TABLE IF NOT EXISTS coach_requests (
          id SERIAL PRIMARY KEY,
          user_tg_id TEXT NOT NULL,
          user_id INTEGER REFERENCES "User"(id) ON DELETE CASCADE,
          goal TEXT NOT NULL,
          constraints TEXT,
          stats TEXT,
          contact TEXT NOT NULL,
          status request_status DEFAULT 'new',
          created_at TIMESTAMP DEFAULT now()
      );

      CREATE INDEX IF NOT EXISTS idx_coach_requests_user_tg_id ON coach_requests(user_tg_id);
      CREATE INDEX IF NOT EXISTS idx_coach_requests_status ON coach_requests(status);
      CREATE INDEX IF NOT EXISTS idx_coach_requests_created_at ON coach_requests(created_at);
    `);
    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è 4 –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...");
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);

    console.log("‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:");
    tablesResult.rows.forEach(row => {
      console.log(`  - ${row.table_name}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã...");
    const indexesResult = await client.query(`
      SELECT indexname, tablename 
      FROM pg_indexes 
      WHERE schemaname = 'public'
      ORDER BY tablename, indexname
    `);

    console.log("‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã:");
    indexesResult.rows.forEach(row => {
      console.log(`  - ${row.indexname} (${row.tablename})`);
    });

    console.log("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Railway –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    console.log("\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ Railway");

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
    process.exit(1);
  } finally {
    await client.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupRailwayDatabase().catch(console.error);
