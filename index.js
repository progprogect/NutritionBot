require("dotenv").config();
const { Bot, InlineKeyboard } = require("grammy");
const { Client } = require("pg");
const { parseFoodTextStructured, resolveGrams, macrosFromPer100g } = require("./llm");
const { parseFoodImageStructured } = require("./vision");
const ffmpeg = require("fluent-ffmpeg");
const ffmpegPath = require("ffmpeg-static");
const fs = require("fs");
const path = require("path");
const OpenAI = require("openai");
const http = require("http");
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

ffmpeg.setFfmpegPath(ffmpegPath);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ Railway)
const client = new Client({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initializeDatabase() {
  try {
    await client.connect();
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ");
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (—Ç–æ–ª—å–∫–æ –Ω–∞ Railway)
    if (process.env.RAILWAY_ENVIRONMENT) {
      console.log("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
      const { setupDatabase } = require("./scripts/setup-db");
      await setupDatabase();
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:", err);
    process.exit(1);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
initializeDatabase();

const bot = new Bot(process.env.BOT_TOKEN);

// State –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥—Ä–∞–º–º–æ–≤
const pendingGramEdit = new Map(); // userId -> itemId

// State –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–π
const pendingGoalSetup = new Map(); // userId -> goalType

// State –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–∫–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
const pendingCoach = new Map(); // userId -> { step: 1..4, draft: {...} }

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏—ë–º–∞–º–∏ –ø–∏—â–∏
function slotRu(slot) {
  return { breakfast:"–∑–∞–≤—Ç—Ä–∞–∫", lunch:"–æ–±–µ–¥", dinner:"—É–∂–∏–Ω", snack:"–ø–µ—Ä–µ–∫—É—Å—ã" }[slot] || slot;
}

function mealKeyboard(entryId) {
  return new InlineKeyboard()
    .text("üåÖ –ó–∞–≤—Ç—Ä–∞–∫",  `meal:set:breakfast:${entryId}`)
    .text("‚òÄÔ∏è –û–±–µ–¥",     `meal:set:lunch:${entryId}`)
    .text("üåô –£–∂–∏–Ω",     `meal:set:dinner:${entryId}`)
    .text("üçé –ü–µ—Ä–µ–∫—É—Å—ã", `meal:set:snack:${entryId}`);
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
function createFoodEntryResponse(entryId, lines, sum, inputType = "—Ç–µ–∫—Å—Ç–∞/–≥–æ–ª–æ—Å–∞") {
  // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É - —Å–Ω–∞—á–∞–ª–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏
  const finalKb = new InlineKeyboard();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ (—Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ - —Å–≤–µ—Ä—Ö—É)
  const mealKb = mealKeyboard(entryId);
  mealKb.inline_keyboard.forEach(row => {
    finalKb.inline_keyboard.push(row);
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
  finalKb.row();
  
  // –ó–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—å—é
  finalKb.text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞–º–º—ã", `edit:${entryId}`)
         .row()
         .text("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –≤—á–µ—Ä–∞", `mv_y:${entryId}`)
         .text("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", `del:${entryId}`)
         .row()
         .text("–ò—Ç–æ–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", "day")
         .text("–ò—Ç–æ–≥ –∑–∞ –≤—á–µ—Ä–∞", "day_yesterday")
         .row()
         .text("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", "coach:new");

  const message = `–î–æ–±–∞–≤–∏–ª (–∏–∑ ${inputType}):\n${lines}\n${sum}\n\n–£–∫–∞–∂–∏ –ø—Ä–∏—ë–º –ø–∏—â–∏:`;
  
  return { message, keyboard: finalKb };
}

// Rate-limit –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (in-memory)
const userBucket = new Map(); // tgId -> { ts[], limit, windowMs }
const LIMIT = 8, WINDOW_MS = 60_000;

function allowEvent(tgId) {
  const now = Date.now();
  const rec = userBucket.get(tgId) || { ts: [] };
  // –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ
  rec.ts = rec.ts.filter(t => now - t < WINDOW_MS);
  if (rec.ts.length >= LIMIT) { 
    userBucket.set(tgId, rec); 
    return false; 
  }
  rec.ts.push(now); 
  userBucket.set(tgId, rec);
  return true;
}

async function guardRate(ctx) {
  const tgId = String(ctx.from.id);
  if (!allowEvent(tgId)) {
    await ctx.reply("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ üôè");
    return false;
  }
  return true;
}

// –¢–∞–π–º–∞—É—Ç—ã OpenAI
async function withTimeout(promise, ms, onTimeoutMsg = "–¢–∞–π–º–∞—É—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.") {
  let to;
  const timeout = new Promise((_, rej) => to = setTimeout(() => rej(new Error("TIMEOUT")), ms));
  try {
    const res = await Promise.race([promise, timeout]);
    clearTimeout(to); 
    return res;
  } catch (e) {
    clearTimeout(to); 
    throw new Error(onTimeoutMsg);
  }
}

// –•–µ–ª–ø–µ—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OGG –≤ WAV
async function oggToWav(inputPath, outputPath) {
  return new Promise((resolve, reject) => {
    ffmpeg(inputPath)
      .audioCodec("pcm_s16le")
      .format("wav")
      .on("end", () => resolve(outputPath))
      .on("error", reject)
      .save(outputPath);
  });
}

// –•–µ–ª–ø–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ
async function transcribeAudio(filePath) {
  const file = fs.createReadStream(filePath);
  const resp = await openai.audio.transcriptions.create({
    file,
    model: "whisper-1",
    language: "ru"
  });
  return resp.text?.trim() || "";
}

// –•–µ–ª–ø–µ—Ä: —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ data URL
async function downloadPhotoAsDataUrl(api, fileId) {
  const file = await api.getFile(fileId);
  const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
  const res = await fetch(fileUrl);
  const buf = Buffer.from(await res.arrayBuffer());
  const base64 = buf.toString("base64");
  // –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ–æ—Ç–æ -> jpeg
  return `data:image/jpeg;base64,${base64}`;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–Ω—è
async function checkDayTriggers(ctx, text) {
  const tgId = String(ctx.from.id);
  
  if (text === '–∏—Ç–æ–≥ –∑–∞ –≤—á–µ—Ä–∞' || text === '–∏—Ç–æ–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è') {
    try {
      const userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [tgId]);
      if (userResult.rows.length === 0) {
        await ctx.reply("–ï—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ.");
        return true;
      }
      const userId = userResult.rows[0].id;
      
      const dateInfo = text === '–∏—Ç–æ–≥ –∑–∞ –≤—á–µ—Ä–∞' ? resolveDayToken('–≤—á–µ—Ä–∞') : null;
      const result = await renderDayTotals(userId, dateInfo);
      await ctx.reply(result.message);
      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ—Ä–∞–∑—ã-—Ç—Ä–∏–≥–≥–µ—Ä–∞:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      return true;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—É "–∏—Ç–æ–≥ –∑–∞ DD.MM.YYYY"
  const dateMatch = text.match(/^–∏—Ç–æ–≥ –∑–∞ (\d{2}\.\d{2}\.\d{4})$/);
  if (dateMatch) {
    try {
      const userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [tgId]);
      if (userResult.rows.length === 0) {
        await ctx.reply("–ï—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ.");
        return true;
      }
      const userId = userResult.rows[0].id;
      
      const dateInfo = resolveDayToken(dateMatch[1]);
      if (!dateInfo) {
        await ctx.reply("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä—ã: –∏—Ç–æ–≥ –∑–∞ 21.09.2025");
        return true;
      }
      
      const result = await renderDayTotals(userId, dateInfo);
      await ctx.reply(result.message);
      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ—Ä–∞–∑—ã-—Ç—Ä–∏–≥–≥–µ—Ä–∞:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      return true;
    }
  }
  
  return false;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –µ–¥—ã
async function handleFoodText(ctx, text) {
  const tz = "Europe/Warsaw";
  const tgId = String(ctx.from.id);

  try {
    // 1) –Ω–∞–π—Ç–∏/—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [tgId]);
    if (userResult.rows.length === 0) {
      userResult = await client.query('INSERT INTO "User" ("tgId") VALUES ($1) RETURNING id', [tgId]);
    }
    const userId = userResult.rows[0].id;

    // 2) –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
    const entryResult = await client.query(
      'INSERT INTO "FoodEntry" ("userId", date, "textRaw", "createdAt") VALUES ($1, $2, $3, $4) RETURNING id',
      [userId, new Date(), text, new Date()]
    );
    const entryId = entryResult.rows[0].id;

    // 3) –ø–∞—Ä—Å–∏–Ω–≥ LLM —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const items = await withTimeout(parseFoodTextStructured(text, tz), 20000, "–°–µ—Ä–≤–∏—Å—ã –¥—É–º–∞—é—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—á–µ.");

    // 4) —Ä–∞—Å—á—ë—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
    let total = { kcal: 0, p: 0, f: 0, c: 0, fiber: 0 };
    for (const it of items) {
      const grams = resolveGrams({
        qty: it.qty,
        unit: it.unit,
        density: it.density_g_per_ml ?? null,
        pieceGrams: it.default_piece_grams ?? null,
        resolved_grams: it.resolved_grams ?? null,
      });
      const m = macrosFromPer100g(grams, it.per100g);
      total.kcal += m.kcal; 
      total.p += m.p; 
      total.f += m.f;
      total.c += m.c; 
      total.fiber += m.fiber;

      await client.query(
        `INSERT INTO food_items(entry_id, name, qty, unit, resolved_grams, kcal, p, f, c, fiber, edited_by_user, created_at)
         VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, false, now())`,
        [entryId, it.name, it.qty, it.unit, grams, m.kcal, m.p, m.f, m.c, m.fiber]
      );
    }

    const lines = items.map(i => `‚Ä¢ ${i.name}: ${i.qty} ${i.unit}`).join("\n");
    const sum = `–ò—Ç–æ–≥–æ: ${Math.round(total.kcal)} –∫–∫–∞–ª | –ë ${total.p.toFixed(1)} | –ñ ${total.f.toFixed(1)} | –£ ${total.c.toFixed(1)} | –ö–ª ${total.fiber.toFixed(1)}`;

    // 5) –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–æ–∫
    const { message, keyboard } = createFoodEntryResponse(entryId, lines, sum, "—Ç–µ–∫—Å—Ç–∞/–≥–æ–ª–æ—Å–∞");
    
    await ctx.reply(message, { reply_markup: keyboard });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleFoodText:", e);
    
    let errorMessage = "–ó–∞–ø–æ–º–Ω–∏–ª, –Ω–æ –±–µ–∑ —Ä–∞—Å—á—ë—Ç–æ–≤ (—Ç–µ—Ö. –ø–∞—É–∑–∞). /day ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞ –¥–µ–Ω—å.";
    
    if (e.message.includes("–°–µ—Ä–≤–∏—Å—ã –¥—É–º–∞—é—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ")) {
      errorMessage = "–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—á–µ üìù";
    } else if (e.message.includes("OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã–π JSON")) {
      errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—â–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–æ–≤—Å—è–Ω–∫–∞ 60 –≥, –º–æ–ª–æ–∫–æ 200 –º–ª¬ª üìù";
    } else if (e.message.includes("TIMEOUT")) {
      errorMessage = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—á–µ üìù";
    } else if (e.message.includes("InlineKeyboard.combine is not a function")) {
      errorMessage = "–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É üîß";
    } else if (e.message.includes("relation") && e.message.includes("does not exist")) {
      errorMessage = "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É üóÑÔ∏è";
    } else if (e.message.includes("syntax error")) {
      errorMessage = "–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üóÑÔ∏è";
    } else if (e.message.includes("connection")) {
      errorMessage = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É üîå";
    } else if (e.message.includes("rate limit") || e.message.includes("429")) {
      errorMessage = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ ‚è∞";
    } else if (e.message.includes("401") || e.message.includes("unauthorized")) {
      errorMessage = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É üîê";
    } else if (e.message.includes("500") || e.message.includes("internal server error")) {
      errorMessage = "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É üõ†Ô∏è";
    } else {
      // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      errorMessage = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${e.message}. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É üö®`;
    }
    
    await ctx.reply(errorMessage);
  }
}

// –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç
function resolveDayToken(token, tz = "Europe/Warsaw") {
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–æ–∫–µ–Ω
  const normalized = token.toLowerCase().trim();
  
  if (normalized === 'today' || normalized === '—Å–µ–≥–æ–¥–Ω—è') {
    const start = new Date(today);
    const end = new Date(today);
    end.setDate(end.getDate() + 1);
    return {
      start: start.toISOString().split('T')[0],
      end: end.toISOString().split('T')[0],
      title: '—Å–µ–≥–æ–¥–Ω—è'
    };
  }
  
  if (normalized === 'yesterday' || normalized === '–≤—á–µ—Ä–∞') {
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    const start = new Date(yesterday);
    const end = new Date(yesterday);
    end.setDate(end.getDate() + 1);
    return {
      start: start.toISOString().split('T')[0],
      end: end.toISOString().split('T')[0],
      title: '–≤—á–µ—Ä–∞'
    };
  }
  
  // DD.MM.YYYY —Ñ–æ—Ä–º–∞—Ç
  const ddmmyyyy = normalized.match(/^(\d{1,2})\.(\d{1,2})\.(\d{4})$/);
  if (ddmmyyyy) {
    const [, day, month, year] = ddmmyyyy;
    const date = new Date(year, month - 1, day);
    if (date.getFullYear() == year && date.getMonth() == month - 1 && date.getDate() == day) {
      const start = new Date(date);
      const end = new Date(date);
      end.setDate(end.getDate() + 1);
      return {
        start: start.toISOString().split('T')[0],
        end: end.toISOString().split('T')[0],
        title: `${day.padStart(2, '0')}.${month.padStart(2, '0')}.${year}`
      };
    }
  }
  
  // YYYY-MM-DD —Ñ–æ—Ä–º–∞—Ç
  const yyyymmdd = normalized.match(/^(\d{4})-(\d{1,2})-(\d{1,2})$/);
  if (yyyymmdd) {
    const [, year, month, day] = yyyymmdd;
    const date = new Date(year, month - 1, day);
    if (date.getFullYear() == year && date.getMonth() == month - 1 && date.getDate() == day) {
      const start = new Date(date);
      const end = new Date(date);
      end.setDate(end.getDate() + 1);
      return {
        start: start.toISOString().split('T')[0],
        end: end.toISOString().split('T')[0],
        title: `${day.padStart(2, '0')}.${month.padStart(2, '0')}.${year}`
      };
    }
  }
  
  return null;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞
function coachStatusKeyboard(id) {
  return new InlineKeyboard()
    .text("–í —Ä–∞–±–æ—Ç—É", `cr:set:in_progress:${id}`)
    .text("–ì–æ—Ç–æ–≤–æ",   `cr:set:done:${id}`)
    .text("–û—Ç–∫–ª–æ–Ω–∏—Ç—å",`cr:set:rejected:${id}`);
}

async function renderDayTotals(userId, dateInfo = null) {
  try {
    let dateCondition, params, title;
    
    if (dateInfo) {
      dateCondition = `AND fe.date::date >= $2 AND fe.date::date < $3`;
      params = [userId, dateInfo.start, dateInfo.end];
      title = dateInfo.title;
    } else {
      dateCondition = `AND fe.date::date = CURRENT_DATE`;
      params = [userId];
      title = '—Å–µ–≥–æ–¥–Ω—è';
    }
    
    const entriesResult = await client.query(
      `SELECT fe.id as entry_id, fi.name, fi.qty, fi.unit, fi.resolved_grams, fi.kcal, fi.p, fi.f, fi.c, fi.fiber
       FROM "FoodEntry" fe
       JOIN food_items fi ON fi.entry_id = fe.id
       WHERE fe."userId" = $1 ${dateCondition}
       ORDER BY fe.id ASC, fi.id ASC`,
      params
    );
    
    if (entriesResult.rows.length === 0) {
      return { success: false, message: `–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ ${title}.` };
    }
    
    let total = { kcal: 0, p: 0, f: 0, c: 0, fiber: 0 };
    const lines = entriesResult.rows.map(r => {
      total.kcal += Number(r.kcal); 
      total.p += Number(r.p);
      total.f += Number(r.f); 
      total.c += Number(r.c); 
      total.fiber += Number(r.fiber);
      return `‚Ä¢ ${r.name} (${Math.round(r.resolved_grams)}–≥) ‚Äî ${Math.round(r.kcal)} –∫–∫–∞–ª | –ë ${r.p} | –ñ ${r.f} | –£ ${r.c} | –ö–ª ${r.fiber}`;
    }).join('\n');
    
    const totalLine = `\n\n–ò–¢–û–ì–û: ${Math.round(total.kcal)} –∫–∫–∞–ª | –ë ${total.p.toFixed(1)} | –ñ ${total.f.toFixed(1)} | –£ ${total.c.toFixed(1)} | –ö–ª ${total.fiber.toFixed(1)}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è)
    let goalProgress = "";
    if (!dateInfo) { // —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
      const goals = await getUserGoals(userId);
      const todayData = {
        total_kcal: total.kcal,
        total_protein: total.p,
        total_fat: total.f,
        total_carbs: total.c,
        total_fiber: total.fiber
      };
      const progress = calculateProgress(goals, todayData);
      
      if (Object.keys(progress).length > 0) {
        goalProgress = "\n\nüéØ –ü–†–û–ì–†–ï–°–° –ö –¶–ï–õ–Ø–ú:\n";
        if (progress.calories) {
          const emoji = progress.calories.percent >= 90 ? '‚úÖ' : progress.calories.percent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
          goalProgress += `‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${progress.calories.current}/${progress.calories.goal} –∫–∫–∞–ª (${progress.calories.percent}%) ${emoji}\n`;
        }
        if (progress.protein) {
          const emoji = progress.protein.percent >= 90 ? '‚úÖ' : progress.protein.percent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
          goalProgress += `‚Ä¢ –ë–µ–ª–∫–∏: ${progress.protein.current}/${progress.protein.goal}–≥ (${progress.protein.percent}%) ${emoji}\n`;
        }
        if (progress.fat) {
          const emoji = progress.fat.percent >= 90 ? '‚úÖ' : progress.fat.percent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
          goalProgress += `‚Ä¢ –ñ–∏—Ä—ã: ${progress.fat.current}/${progress.fat.goal}–≥ (${progress.fat.percent}%) ${emoji}\n`;
        }
        if (progress.carbs) {
          const emoji = progress.carbs.percent >= 90 ? '‚úÖ' : progress.carbs.percent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
          goalProgress += `‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: ${progress.carbs.current}/${progress.carbs.goal}–≥ (${progress.carbs.percent}%) ${emoji}\n`;
        }
        if (progress.fiber) {
          const emoji = progress.fiber.percent >= 90 ? '‚úÖ' : progress.fiber.percent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
          goalProgress += `‚Ä¢ –ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${progress.fiber.current}/${progress.fiber.goal}–≥ (${progress.fiber.percent}%) ${emoji}\n`;
        }
      }
    }
    
    return { success: true, message: `–ò—Ç–æ–≥–∏ –¥–Ω—è:\n\n${lines}${totalLine}${goalProgress}` };
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ –∏—Ç–æ–≥–æ–≤:", error);
    return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function renderDayTotalsWithButtons(userId, dateInfo = null) {
  try {
    let dateCondition, params, title;
    
    if (dateInfo) {
      dateCondition = `AND fe.date::date >= $2 AND fe.date::date < $3`;
      params = [userId, dateInfo.start, dateInfo.end];
      title = dateInfo.title;
    } else {
      dateCondition = `AND fe.date::date = CURRENT_DATE`;
      params = [userId];
      title = '—Å–µ–≥–æ–¥–Ω—è';
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞ –¥–µ–Ω—å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ entry_id –∏ meal_slot
    const { rows } = await client.query(`
      SELECT fe.id AS entry_id, fe.meal_slot,
             fi.name, fi.kcal, fi.p, fi.f, fi.c, fi.fiber, fi.resolved_grams
      FROM "FoodEntry" fe
      JOIN food_items fi ON fi.entry_id = fe.id
      WHERE fe."userId" = $1 ${dateCondition}
      ORDER BY fe.id ASC, fi.id ASC
    `, params);

    if (!rows.length) {
      return { success: false, message: `–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ ${title}.` };
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏—ë–º–∞–º –ø–∏—â–∏
    const buckets = {
      breakfast: [], lunch: [], dinner: [], snack: [], unslotted: []
    };
    
    rows.forEach(r => {
      const slot = r.meal_slot || "unslotted";
      (buckets[slot] || buckets.unslotted).push(r);
    });

    function renderBucket(label, arr) {
      if (!arr.length) return "";
      
      let t = { kcal: 0, p: 0, f: 0, c: 0, fiber: 0 };
      const lines = arr.map(x => {
        t.kcal += +x.kcal; 
        t.p += +x.p; 
        t.f += +x.f; 
        t.c += +x.c; 
        t.fiber += +x.fiber;
        return `‚Ä¢ ${x.name} (${Math.round(x.resolved_grams)}–≥) ‚Äî ${Math.round(x.kcal)} –∫–∫–∞–ª | –ë ${(+x.p).toFixed(1)} | –ñ ${(+x.f).toFixed(1)} | –£ ${(+x.c).toFixed(1)} | –ö–ª ${(+x.fiber).toFixed(1)}`;
      }).join("\n");
      
      const sum = `–ò—Ç–æ–≥ ${label.toLowerCase()}: ${Math.round(t.kcal)} –∫–∫–∞–ª | –ë ${t.p.toFixed(1)} | –ñ ${t.f.toFixed(1)} | –£ ${t.c.toFixed(1)} | –ö–ª ${t.fiber.toFixed(1)}`;
      return `\n${label}\n${lines}\n${sum}\n`;
    }

    const parts = [];
    parts.push(renderBucket("–ó–∞–≤—Ç—Ä–∞–∫", buckets.breakfast));
    parts.push(renderBucket("–û–±–µ–¥", buckets.lunch));
    parts.push(renderBucket("–£–∂–∏–Ω", buckets.dinner));
    parts.push(renderBucket("–ü–µ—Ä–µ–∫—É—Å—ã", buckets.snack));
    if (buckets.unslotted.length) parts.push(renderBucket("–ë–µ–∑ –ø–æ–º–µ—Ç–∫–∏", buckets.unslotted));

    // –û–±—â–∏–π –∏—Ç–æ–≥
    const all = rows.reduce((t, r) => ({
      kcal: t.kcal + +r.kcal, 
      p: t.p + +r.p, 
      f: t.f + +r.f, 
      c: t.c + +r.c, 
      fiber: t.fiber + +r.fiber
    }), { kcal: 0, p: 0, f: 0, c: 0, fiber: 0 });

    const text = `–ò—Ç–æ–≥–∏ –¥–Ω—è:\n${parts.filter(Boolean).join("")}\n–ò–¢–û–ì–û –∑–∞ –¥–µ–Ω—å: ${Math.round(all.kcal)} –∫–∫–∞–ª | –ë ${all.p.toFixed(1)} | –ñ ${all.f.toFixed(1)} | –£ ${all.c.toFixed(1)} | –ö–ª ${all.fiber.toFixed(1)}`;

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏
    const kb = new InlineKeyboard();
    let isFirst = true;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏, –≥–¥–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏
    const mealSlots = ['breakfast', 'lunch', 'dinner', 'snack', 'unslotted'];
    mealSlots.forEach(slot => {
      if (buckets[slot] && buckets[slot].length > 0) {
        if (!isFirst) kb.row();
        isFirst = false;
        const mealLabel = slot === 'unslotted' ? '–ë–µ–∑ –ø–æ–º–µ—Ç–∫–∏' : slotRu(slot);
        const emoji = slot === 'breakfast' ? 'üåÖ' : 
                     slot === 'lunch' ? '‚òÄÔ∏è' : 
                     slot === 'dinner' ? 'üåô' : 
                     slot === 'snack' ? 'üçé' : '‚ùì';
        kb.text(`${emoji} ${mealLabel}`, `meal:edit:${slot}`);
      }
    });

    return { success: true, message: text, buttons: kb };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ –∏—Ç–æ–≥–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏:", error);
    return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." };
  }
}

// –∫–æ–º–∞–Ω–¥–∞ /start
bot.command("start", (ctx) => {
  const kb = new InlineKeyboard()
    .text("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", "coach:new")
    .text("–ü–æ–º–æ—â—å", "help");
  
  const startText = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —Ç–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è.

–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:
‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ –µ–ª  
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ  
‚Ä¢ –ü—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã  

–Ø –ø–æ—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã –∏ –∫–ª–µ—Ç—á–∞—Ç–∫—É.  

üìä –ò—Ç–æ–≥–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:
‚Ä¢ /day ‚Äî –∑–∞ —Å–µ–≥–æ–¥–Ω—è (—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∫ —Ü–µ–ª—è–º)
‚Ä¢ /day –≤—á–µ—Ä–∞ ‚Äî –∑–∞ –≤—á–µ—Ä–∞  
‚Ä¢ /day 21.09.2025 ‚Äî –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
‚Ä¢ /week ‚Äî –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /month ‚Äî –º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üéØ –¶–µ–ª–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é:
‚Ä¢ /goal ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º, –±–µ–ª–∫–∞–º, –∂–∏—Ä–∞–º, —É–≥–ª–µ–≤–æ–¥–∞–º, –∫–ª–µ—Ç—á–∞—Ç–∫–µ
‚Ä¢ /goal progress ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª—è–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è

–ê –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ ‚Äî –∑–∞–∫–∞–∂–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —É —Ç—Ä–µ–Ω–µ—Ä–∞.

üëâ –ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å: –Ω–∞–ø–∏—à–∏ –∏–ª–∏ —Å–∫–∞–∂–∏ –æ–¥–Ω–æ –±–ª—é–¥–æ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä:  
¬´–æ–≤—Å—è–Ω–∫–∞ 60 –≥¬ª  
–õ—É—á—à–µ –¥–æ–±–∞–≤–ª—è—Ç—å –µ–¥—É –ø–æ –æ–¥–Ω–æ–º—É –±–ª—é–¥—É, —á–µ–º —Å—Ä–∞–∑—É –º–Ω–æ–≥–æ.`;

  return ctx.reply(startText, { reply_markup: kb });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∑–∞ –¥–µ–Ω—å —Å –ö–ë–ñ–£
async function getDayEntries(userTgId) {
  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [userTgId]);
    
    if (userResult.rows.length === 0) {
      return { success: false, message: "–ï—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ." };
    }
    
    const userId = userResult.rows[0].id;
    return await renderDayTotals(userId);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:", error);
    return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." };
  }
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π
bot.on("callback_query:data", async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    const userId = String(ctx.from.id);
    
    console.log(`üîò Callback received: ${data} from user ${userId}`);
    
    if (data === "help") {
      const helpText = `‚ÑπÔ∏è –í–æ—Ç –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1Ô∏è‚É£ –ó–∞–ø–∏—Å—ã–≤–∞–π –µ–¥—É:
‚Ä¢ –¢–µ–∫—Å—Ç–æ–º: ¬´–æ–≤—Å—è–Ω–∫–∞ 60 –≥ –∏ –º–æ–ª–æ–∫–æ 200 –º–ª¬ª
‚Ä¢ –ì–æ–ª–æ—Å–æ–º: —Å–∫–∞–∂–∏ —Ç–æ –∂–µ —Å–∞–º–æ–µ
‚Ä¢ –§–æ—Ç–æ: –ø—Ä–∏—à–ª–∏ —Å–Ω–∏–º–æ–∫ —Ç–∞—Ä–µ–ª–∫–∏ (–º–æ–∂–Ω–æ —Å –ø–æ–¥–ø–∏—Å—å—é)

2Ô∏è‚É£ –°–º–æ—Ç—Ä–∏ –∏—Ç–æ–≥–∏:
‚Ä¢ /day ‚Äî –∑–∞ —Å–µ–≥–æ–¥–Ω—è (—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∫ —Ü–µ–ª—è–º)
‚Ä¢ /day –≤—á–µ—Ä–∞ ‚Äî –∑–∞ –≤—á–µ—Ä–∞
‚Ä¢ /day 21.09.2025 ‚Äî –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
–ò–ª–∏ –Ω–∞–ø–∏—à–∏: ¬´–∏—Ç–æ–≥ –∑–∞ –≤—á–µ—Ä–∞¬ª

3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–≥—Ä–µ—Å—Å:
‚Ä¢ /week ‚Äî –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç—Ä–µ–Ω–¥—ã
‚Ä¢ /month ‚Äî –º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

4Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π —Ü–µ–ª–∏:
‚Ä¢ /goal ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º, –±–µ–ª–∫–∞–º, –∂–∏—Ä–∞–º, —É–≥–ª–µ–≤–æ–¥–∞–º, –∫–ª–µ—Ç—á–∞—Ç–∫–µ
‚Ä¢ /goal progress ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª—è–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ /goal set calories 2000 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
‚Ä¢ /goal remove calories ‚Äî —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º

5Ô∏è‚É£ –£–ø—Ä–∞–≤–ª—è–π –∑–∞–ø–∏—Å—è–º–∏:
–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏:
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞–º–º—ã
‚Ä¢ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –≤—á–µ—Ä–∞
‚Ä¢ –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å

6Ô∏è‚É£ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω:
–ù–∞–∂–º–∏ ¬´–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω¬ª ‚Üí –±–æ—Ç –∑–∞–¥–∞—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Üí –∑–∞—è–≤–∫–∞ –ø–æ–ø–∞–¥—ë—Ç —Ç—Ä–µ–Ω–µ—Ä—É.

üëâ –ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å: –Ω–∞–ø–∏—à–∏ ¬´–∫–æ—Ñ–µ —Å —Å–∞—Ö–∞—Ä–æ–º 2 —á.–ª.¬ª –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ.`;
      
      await ctx.answerCallbackQuery({ text: "–ü–æ–∫–∞–∑—ã–≤–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é..." });
      await ctx.reply(helpText);
    } else if (data === "day") {
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [userId]);
      
      if (userResult.rows.length === 0) {
        await ctx.answerCallbackQuery({ text: "–ï—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ." });
        return;
      }
      
      const dbUserId = userResult.rows[0].id;
      const result = await renderDayTotalsWithButtons(dbUserId);
      
      if (result.buttons) {
        await ctx.answerCallbackQuery({ text: "–ü–æ–∫–∞–∑—ã–≤–∞—é –∏—Ç–æ–≥ –¥–Ω—è..." });
        await ctx.reply(result.message, { reply_markup: result.buttons });
      } else {
        await ctx.answerCallbackQuery({ text: result.message });
      }
    } else if (data === "day_yesterday") {
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [userId]);
      
      if (userResult.rows.length === 0) {
        await ctx.answerCallbackQuery({ text: "–ï—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ." });
        return;
      }
      
      const dbUserId = userResult.rows[0].id;
      const dateInfo = resolveDayToken("–≤—á–µ—Ä–∞");
      const result = await renderDayTotalsWithButtons(dbUserId, dateInfo);
      
      if (result.buttons) {
        await ctx.answerCallbackQuery({ text: "–ü–æ–∫–∞–∑—ã–≤–∞—é –∏—Ç–æ–≥ –∑–∞ –≤—á–µ—Ä–∞..." });
        await ctx.reply(result.message, { reply_markup: result.buttons });
      } else {
        await ctx.answerCallbackQuery({ text: result.message });
      }
    } else if (data.startsWith("meal:set:")) {
      const parts = data.split(":");
      const slot = parts[2];
      const entryId = parts[3];
      
      const allowed = ["breakfast", "lunch", "dinner", "snack"];
      if (!allowed.includes(slot)) {
        await ctx.answerCallbackQuery({ text: "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–ª–æ—Ç", show_alert: true });
        return;
      }

      try {
        await client.query(`UPDATE "FoodEntry" SET meal_slot=$1 WHERE id=$2`, [slot, entryId]);
        await ctx.answerCallbackQuery({ text: `–ü–æ–º–µ—Ç–∏–ª –∫–∞–∫: ${slotRu(slot)}` });
        await ctx.reply(`–ì–æ—Ç–æ–≤–æ. –≠—Ç–∞ –∑–∞–ø–∏—Å—å ‚Äî ${slotRu(slot)}.`);
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏:", e);
        await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert: true });
      }
    } else if (data.startsWith("meal:edit:")) {
      const slot = data.split(":")[2];
      const allowed = ["breakfast", "lunch", "dinner", "snack", "unslotted"];
      
      if (!allowed.includes(slot)) {
        await ctx.answerCallbackQuery({ text: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏—ë–º –ø–∏—â–∏", show_alert: true });
        return;
      }

      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏
        let query, params;
        if (slot === 'unslotted') {
          query = `
            SELECT fe.id AS entry_id, fe.meal_slot,
                   fi.id as item_id, fi.name, fi.kcal, fi.p, fi.f, fi.c, fi.fiber, fi.resolved_grams
            FROM "FoodEntry" fe
            JOIN food_items fi ON fi.entry_id = fe.id
            WHERE fe."userId" = (SELECT id FROM "User" WHERE "tgId" = $1)
              AND fe.date::date = CURRENT_DATE
              AND fe.meal_slot IS NULL
            ORDER BY fe.id ASC, fi.id ASC
          `;
          params = [userId];
        } else {
          query = `
            SELECT fe.id AS entry_id, fe.meal_slot,
                   fi.id as item_id, fi.name, fi.kcal, fi.p, fi.f, fi.c, fi.fiber, fi.resolved_grams
            FROM "FoodEntry" fe
            JOIN food_items fi ON fi.entry_id = fe.id
            WHERE fe."userId" = (SELECT id FROM "User" WHERE "tgId" = $1)
              AND fe.date::date = CURRENT_DATE
              AND fe.meal_slot = $2
            ORDER BY fe.id ASC, fi.id ASC
          `;
          params = [userId, slot];
        }
        
        const { rows } = await client.query(query, params);

        if (!rows.length) {
          await ctx.answerCallbackQuery({ text: "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —ç—Ç–æ–º –ø—Ä–∏—ë–º–µ –ø–∏—â–∏", show_alert: true });
          return;
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∑–∞–ø–∏—Å—è–º (entry_id)
        const entries = new Map();
        rows.forEach(r => {
          if (!entries.has(r.entry_id)) {
            entries.set(r.entry_id, {
              id: r.entry_id,
              meal: r.meal_slot || 'unslotted',
              items: []
            });
          }
          entries.get(r.entry_id).items.push(r);
        });

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–∏—ë–º–µ –ø–∏—â–∏
        const kb = new InlineKeyboard();
        let isFirst = true;
        entries.forEach((entry, entryId) => {
          if (!isFirst) kb.row();
          isFirst = false;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
          const itemNames = entry.items.map(item => item.name).slice(0, 2);
          const buttonText = itemNames.length > 1 
            ? `‚úèÔ∏è ${itemNames.join(', ')}${entry.items.length > 2 ? '...' : ''}`
            : `‚úèÔ∏è ${itemNames[0]}`;
            
          kb.text(buttonText, `edit:${entryId}`)
             .text(`üìÖ –ù–∞ –≤—á–µ—Ä–∞`, `mv_y:${entryId}`)
             .text(`üóëÔ∏è –£–¥–∞–ª–∏—Ç—å`, `del:${entryId}`);
        });

        const mealLabel = slot === 'unslotted' ? '–ë–µ–∑ –ø–æ–º–µ—Ç–∫–∏' : slotRu(slot);
        const message = `–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –≤ –ø—Ä–∏—ë–º–µ "${mealLabel}" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`;
        
        await ctx.answerCallbackQuery({ text: `–ü–æ–∫–∞–∑—ã–≤–∞—é –∑–∞–ø–∏—Å–∏ –≤ ${mealLabel.toLowerCase()}` });
        await ctx.reply(message, { reply_markup: kb });
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏:", e);
        await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ", show_alert: true });
      }
    } else if (data === "coach:new") {
      pendingCoach.set(userId, { step: 1, draft: {} });
      await ctx.answerCallbackQuery();
      
      const cancelKb = new InlineKeyboard()
        .text("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", "coach:cancel");
        
      return ctx.reply("–¶–µ–ª—å (—Å–±—Ä–æ—Å/–Ω–∞–±–æ—Ä/–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ) –∏ —Å—Ä–æ–∫? –ù–∞–ø–∏—à–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.", { 
        reply_markup: cancelKb 
      });
    } else if (data === "coach:cancel") {
      if (pendingCoach.has(userId)) {
        pendingCoach.delete(userId);
        await ctx.answerCallbackQuery({ text: "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞" });
        
        const backKb = new InlineKeyboard()
          .text("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", "coach:new")
          .text("–ü–æ–º–æ—â—å", "help");
          
        return ctx.reply("–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ—Ç–º–µ–Ω–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ.", {
          reply_markup: backKb
        });
      } else {
        await ctx.answerCallbackQuery({ text: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã" });
      }
    } else if (data.startsWith("goal:")) {
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ü–µ–ª–µ–π
      const parts = data.split(":");
      const action = parts[1];
      
      if (action === "set" && parts[2]) {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏
        const goalType = parts[2];
        const goalNames = {
          calories: '–∫–∞–ª–æ—Ä–∏–∏',
          protein: '–±–µ–ª–∫–∏',
          fat: '–∂–∏—Ä—ã',
          carbs: '—É–≥–ª–µ–≤–æ–¥—ã',
          fiber: '–∫–ª–µ—Ç—á–∞—Ç–∫–∞'
        };
        
        const ranges = {
          calories: { min: 500, max: 8000, unit: '–∫–∫–∞–ª/–¥–µ–Ω—å' },
          protein: { min: 20, max: 400, unit: '–≥/–¥–µ–Ω—å' },
          fat: { min: 10, max: 200, unit: '–≥/–¥–µ–Ω—å' },
          carbs: { min: 50, max: 800, unit: '–≥/–¥–µ–Ω—å' },
          fiber: { min: 5, max: 80, unit: '–≥/–¥–µ–Ω—å' }
        };
        
        const range = ranges[goalType];
        const message = `üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –ø–æ ${goalNames[goalType]}\n\n` +
          `–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç ${range.min} –¥–æ ${range.max} ${range.unit}\n\n` +
          `–ù–∞–ø—Ä–∏–º–µ—Ä: ${Math.round((range.min + range.max) / 2)}`;
        
        await ctx.editMessageText(message);
        await ctx.answerCallbackQuery();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ü–µ–ª–∏
        pendingGoalSetup.set(userId, goalType);
        
      } else if (action === "set") {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–µ–ª–∏
        const kb = new InlineKeyboard()
          .text("–ö–∞–ª–æ—Ä–∏–∏", "goal:set:calories")
          .text("–ë–µ–ª–∫–∏", "goal:set:protein")
          .row()
          .text("–ñ–∏—Ä—ã", "goal:set:fat")
          .text("–£–≥–ª–µ–≤–æ–¥—ã", "goal:set:carbs")
          .row()
          .text("–ö–ª–µ—Ç—á–∞—Ç–∫–∞", "goal:set:fiber")
          .row()
          .text("–ù–∞–∑–∞–¥", "goal:view");
        
        await ctx.editMessageText("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–µ–ª–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:", { reply_markup: kb });
        await ctx.answerCallbackQuery();
        
      } else if (action === "view") {
        // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ª–µ–π
        const goals = await getUserGoals(userId);
        const message = formatGoalsMessage(goals);
        
        const kb = new InlineKeyboard()
          .text("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏", "goal:set")
          .text("–ü—Ä–æ–≥—Ä–µ—Å—Å", "goal:progress")
          .row()
          .text("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ", "goal:reset");
        
        await ctx.editMessageText(message, { reply_markup: kb });
        await ctx.answerCallbackQuery();
        
      } else if (action === "progress") {
        // –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const goals = await getUserGoals(userId);
        const todayData = await getTodayNutrition(userId);
        const progress = calculateProgress(goals, todayData);
        const message = formatProgressMessage(progress);
        
        const kb = new InlineKeyboard()
          .text("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏", "goal:set")
          .text("–ú–æ–∏ —Ü–µ–ª–∏", "goal:view");
        
        await ctx.editMessageText(message, { reply_markup: kb });
        await ctx.answerCallbackQuery();
        
      } else if (action === "reset") {
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
        const kb = new InlineKeyboard()
          .text("–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", "goal:reset:confirm")
          .text("–û—Ç–º–µ–Ω–∞", "goal:view");
        
        await ctx.editMessageText("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ü–µ–ª–∏?", { reply_markup: kb });
        await ctx.answerCallbackQuery();
        
      } else if (action === "reset" && parts[2] === "confirm") {
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Å–±—Ä–æ—Å
        const success = await resetUserGoals(userId);
        if (success) {
          await ctx.editMessageText("‚úÖ –í—Å–µ —Ü–µ–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã");
        } else {
          await ctx.editMessageText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ü–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
        await ctx.answerCallbackQuery();
      }
    } else if (data.startsWith("cr:view:")) {
      const id = data.split(":")[2];
      if (String(ctx.from.id) !== process.env.TRAINER_TG_ID) {
        await ctx.answerCallbackQuery({ text: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert: true });
        return;
      }

      try {
        const { rows } = await client.query(
          `SELECT id, user_tg_id, user_id, goal, constraints, stats, contact, status, created_at
           FROM coach_requests WHERE id=$1`, [id]
        );
        
        if (!rows.length) {
          await ctx.answerCallbackQuery({ text: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert: true });
          return;
        }
        
        const r = rows[0];
        const text =
          `üìù –ó–∞—è–≤–∫–∞ #${r.id} (${r.status})\n` +
          `–û—Ç: tg ${r.user_tg_id}\n` +
          `–î–∞—Ç–∞: ${new Date(r.created_at).toLocaleString("ru-RU")}\n\n` +
          `–¶–µ–ª—å: ${r.goal}\n` +
          `–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${r.constraints || "‚Äî"}\n` +
          `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${r.stats || "‚Äî"}\n` +
          `–ö–æ–Ω—Ç–∞–∫—Ç: ${r.contact}`;

        await ctx.editMessageText(text, { reply_markup: coachStatusKeyboard(id) });
        await ctx.answerCallbackQuery();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–∫–∏:", error);
        await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–∫–∏", show_alert: true });
      }
    } else if (data.startsWith("cr:set:")) {
      const parts = data.split(":");
      if (parts.length >= 4) {
        const newStatus = parts[2];
        const id = parts[3];
        
        if (String(ctx.from.id) !== process.env.TRAINER_TG_ID) {
          await ctx.answerCallbackQuery({ text: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert: true });
          return;
        }
        
        const allowed = ["new","in_progress","done","rejected"];
        if (!allowed.includes(newStatus)) {
          await ctx.answerCallbackQuery({ text: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å", show_alert: true });
          return;
        }

        try {
          await client.query(`UPDATE coach_requests SET status=$1 WHERE id=$2`, [newStatus, id]);

          // –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
          const { rows } = await client.query(
            `SELECT id, user_tg_id, user_id, goal, constraints, stats, contact, status, created_at
             FROM coach_requests WHERE id=$1`, [id]
          );
          
          if (!rows.length) {
            await ctx.answerCallbackQuery({ text: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert: true });
            return;
          }

          const r = rows[0];
          const text =
            `üìù –ó–∞—è–≤–∫–∞ #${r.id} (${r.status})\n` +
            `–û—Ç: tg ${r.user_tg_id}\n` +
            `–î–∞—Ç–∞: ${new Date(r.created_at).toLocaleString("ru-RU")}\n\n` +
            `–¶–µ–ª—å: ${r.goal}\n` +
            `–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${r.constraints || "‚Äî"}\n` +
            `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${r.stats || "‚Äî"}\n` +
            `–ö–æ–Ω—Ç–∞–∫—Ç: ${r.contact}`;

          await ctx.editMessageText(text, { reply_markup: coachStatusKeyboard(id) });
          await ctx.answerCallbackQuery({ text: `–°—Ç–∞—Ç—É—Å: ${newStatus}` });
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞:", error);
          await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert: true });
        }
      }
    } else if (data.startsWith("edit:")) {
      // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      try {
        const entryId = data.split(":")[1];
        const { rows: items } = await client.query(
          `SELECT id, name, resolved_grams FROM food_items WHERE entry_id=$1 ORDER BY id`, 
          [entryId]
        );
        
        if (!items.length) {
          await ctx.answerCallbackQuery({ text: "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π", show_alert: true });
          return;
        }

        const kb = new InlineKeyboard();
        items.forEach(it => kb.text(`${it.name} (${Math.round(it.resolved_grams)} –≥)`, `edititem:${it.id}`).row());
        await ctx.editMessageText("–í—ã–±–µ—Ä–∏ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞–º–º–æ–≤:", { reply_markup: kb });
        await ctx.answerCallbackQuery();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
        await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∑–∏—Ü–∏–π", show_alert: true });
      }
      
    } else if (data.startsWith("edititem:")) {
      // –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
      try {
        const itemId = data.split(":")[1];
        pendingGramEdit.set(userId, Number(itemId));
        await ctx.answerCallbackQuery();
        await ctx.reply("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≤ –≥—Ä–∞–º–º–∞—Ö), –Ω–∞–ø—Ä–∏–º–µ—Ä: 150");
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:", error);
        await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert: true });
      }
      
    } else if (data.startsWith("mv_y:")) {
      // –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –≤—á–µ—Ä–∞
      try {
        const entryId = data.split(":")[1];
        await client.query(`UPDATE "FoodEntry" SET date = date - INTERVAL '1 day' WHERE id=$1`, [entryId]);
        await ctx.answerCallbackQuery({ text: "–ü–µ—Ä–µ–Ω—ë—Å –Ω–∞ –≤—á–µ—Ä–∞" });
        await ctx.reply("–ì–æ—Ç–æ–≤–æ: –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –≤—á–µ—Ä–∞.");
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—á–µ—Ä–∞:", error);
        await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏", show_alert: true });
      }
      
    } else if (data.startsWith("del:")) {
      // –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
      try {
        const entryId = data.split(":")[1];
        await client.query(`DELETE FROM "FoodEntry" WHERE id=$1`, [entryId]);
        await ctx.answerCallbackQuery({ text: "–£–¥–∞–ª–µ–Ω–æ" });
        await ctx.reply("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.");
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error);
        await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏", show_alert: true });
      }
      
    } else {
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
      await ctx.answerCallbackQuery({ text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞." });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ callback_query:", error);
    await ctx.answerCallbackQuery({ text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." });
  }
});

// –∫–æ–º–∞–Ω–¥–∞ /day
bot.command("day", async (ctx) => {
  const t0 = Date.now();
  
  try {
    const userTgId = String(ctx.from.id);
    const args = ctx.message.text.split(' ').slice(1).join(' ').trim();
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [userTgId]);
    if (userResult.rows.length === 0) {
      await ctx.reply("–ï—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ.");
      return;
    }
    const userId = userResult.rows[0].id;
    
    let result;
    if (!args) {
      // /day –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - —Å–µ–≥–æ–¥–Ω—è
      result = await renderDayTotalsWithButtons(userId);
    } else {
      // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
      const dateInfo = resolveDayToken(args);
      if (!dateInfo) {
        await ctx.reply("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä—ã: /day –≤—á–µ—Ä–∞, /day 21.09.2025");
        return;
      }
      result = await renderDayTotalsWithButtons(userId, dateInfo);
    }
    
    if (result.buttons) {
      await ctx.reply(result.message, { reply_markup: result.buttons });
    } else {
      await ctx.reply(result.message);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /day:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "error", Date.now()-t0]);
  } finally {
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "day", Date.now()-t0]);
  }
});

// –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
bot.command("myid", async (ctx) => {
  await ctx.reply(`–í–∞—à Telegram ID: ${ctx.from.id}\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç ID –∏ –∑–∞–º–µ–Ω–∏—Ç–µ ADMIN_TG_ID –≤ .env —Ñ–∞–π–ª–µ –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä.`);
});

// –∫–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ /inbox
bot.command("inbox", async (ctx) => {
  if (String(ctx.from.id) !== process.env.TRAINER_TG_ID) return;

  try {
    const arg = (ctx.message.text.split(/\s+/)[1] || "new").toLowerCase();
    const allowed = ["new","in_progress","done","rejected"];
    const status = allowed.includes(arg) ? arg : "new";

    const { rows } = await client.query(
      `SELECT id, user_tg_id, goal, status, created_at
       FROM coach_requests
       WHERE status=$1
       ORDER BY created_at DESC
       LIMIT 10`, [status]
    );

    if (!rows.length) return ctx.reply(`–ó–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${status}" –Ω–µ—Ç ‚úÖ`);

    const lines = rows.map(r =>
      `#${r.id} ¬∑ ${new Date(r.created_at).toLocaleString("ru-RU")} ¬∑ [${r.status}] ¬∑ ${r.goal.slice(0,60)}`
    );

    const kb = new InlineKeyboard();
    rows.forEach(r => kb.text(`–û—Ç–∫—Ä—ã—Ç—å #${r.id}`, `cr:view:${r.id}`).row());

    await ctx.reply(`–ó–∞—è–≤–∫–∏ (${status}, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n${lines.join("\n")}`, { reply_markup: kb });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ /inbox:", error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.");
  }
});

// –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞ /mvpstats
bot.command("mvpstats", async (ctx) => {
  if (String(ctx.from.id) !== process.env.ADMIN_TG_ID) return;

  try {
    const { rows: dau } = await client.query(
      `SELECT COUNT(DISTINCT user_tg_id) AS dau
       FROM metrics_events WHERE created_at::date = CURRENT_DATE`
    );

    const { rows: byKind } = await client.query(
      `SELECT kind, COUNT(*) AS cnt
       FROM metrics_events
       WHERE created_at::date = CURRENT_DATE AND kind IN ('text','voice','photo')
       GROUP BY kind`
    );

    const { rows: lat } = await client.query(
      `SELECT kind, ROUND(AVG(latency_ms)) AS avg_ms, PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY latency_ms) AS p95_ms
       FROM metrics_events
       WHERE created_at::date = CURRENT_DATE AND kind IN ('text','voice','photo','day')
       GROUP BY kind`
    );

    const dauNum = dau[0]?.dau || 0;
    const kindLine = byKind.map(r => `${r.kind}: ${r.cnt}`).join(" ¬∑ ") || "–Ω–µ—Ç";
    const latLine = lat.map(r => `${r.kind}: avg ${r.avg_ms}–º—Å, p95 ${Math.round(r.p95_ms)}–º—Å`).join("\n") || "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö";

    await ctx.reply(
      `üìä MVP stats (—Å–µ–≥–æ–¥–Ω—è)\nDAU: ${dauNum}\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${kindLine}\n\n‚è± –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å:\n${latLine}`
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ /mvpstats:", error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
  }
});

// –∫–æ–º–∞–Ω–¥–∞ /week –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.command("week", async (ctx) => {
  const t0 = Date.now();
  
  try {
    const userId = String(ctx.from.id);
    const stats = await getWeeklyStats(userId);
    
    console.log("DEBUG /week:", { userId, stats });
    
    if (!stats) {
      return ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ó–∞–ø–∏—Å—ã–≤–∞–π –µ–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π!");
    }
    
    const current = stats.current;
    const previous = stats.previous;
    const daily = stats.daily;
    
    console.log("DEBUG /week data:", { current, previous, daily });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ (–≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º)
    const hasCurrentData = current && (current.avg_kcal || current.avg_protein || current.avg_fat || current.avg_carbs || current.avg_fiber);
    const hasDailyData = daily && daily.length > 0;
    
    console.log("DEBUG /week checks:", { hasCurrentData, hasDailyData });
    
    if (!hasCurrentData && !hasDailyData) {
      return ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ó–∞–ø–∏—Å—ã–≤–∞–π –µ–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π!");
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 7);
    const endDate = new Date();
    endDate.setDate(endDate.getDate() - 1);
    
    const dateRange = `${startDate.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' })}-${endDate.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' })}`;
    
    // –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤
    const kcalTrend = previous.avg_kcal ? 
      (current.avg_kcal - previous.avg_kcal).toFixed(0) : 0;
    const proteinTrend = previous.avg_protein ? 
      (current.avg_protein - previous.avg_protein).toFixed(1) : 0;
    
    const kcalEmoji = kcalTrend > 0 ? '‚ÜóÔ∏è' : kcalTrend < 0 ? '‚ÜòÔ∏è' : '‚û°Ô∏è';
    const proteinEmoji = proteinTrend > 0 ? '‚ÜóÔ∏è' : proteinTrend < 0 ? '‚ÜòÔ∏è' : '‚û°Ô∏è';
    
    let message = `üìä –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (${dateRange})\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (hasCurrentData) {
      message += `üçΩÔ∏è –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n`;
      
      if (current && current.avg_kcal) {
        message += `‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${Math.round(current.avg_kcal)} –∫–∫–∞–ª/–¥–µ–Ω—å\n`;
      }
      if (current && current.avg_protein) {
        message += `‚Ä¢ –ë–µ–ª–∫–∏: ${current.avg_protein.toFixed(1)}–≥/–¥–µ–Ω—å\n`;
      }
      if (current && current.avg_fat) {
        message += `‚Ä¢ –ñ–∏—Ä—ã: ${current.avg_fat.toFixed(1)}–≥/–¥–µ–Ω—å\n`;
      }
      if (current && current.avg_carbs) {
        message += `‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: ${current.avg_carbs.toFixed(1)}–≥/–¥–µ–Ω—å\n`;
      }
      if (current && current.avg_fiber) {
        message += `‚Ä¢ –ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${current.avg_fiber.toFixed(1)}–≥/–¥–µ–Ω—å\n`;
      }
      message += '\n';
    }
    
    if (previous && (previous.avg_kcal || previous.avg_protein)) {
      message += `üìà –¢–†–ï–ù–î–´:\n`;
      if (previous.avg_kcal && current.avg_kcal) {
        message += `‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${kcalEmoji} ${kcalTrend > 0 ? '+' : ''}${kcalTrend} –∫–∫–∞–ª/–¥–µ–Ω—å (vs –ø—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è)\n`;
      }
      if (previous.avg_protein && current.avg_protein) {
        message += `‚Ä¢ –ë–µ–ª–∫–∏: ${proteinEmoji} ${proteinTrend > 0 ? '+' : ''}${proteinTrend}–≥/–¥–µ–Ω—å (vs –ø—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è)\n`;
      }
      message += '\n';
    }
    
    // –î–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    if (hasDailyData) {
      message += `üìÖ –ü–û –î–ù–Ø–ú:\n`;
      const dayNames = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
      
      daily.forEach(day => {
        const dayName = dayNames[new Date(day.day).getDay()];
        let dayLine = `‚Ä¢ ${dayName}: `;
        const parts = [];
        
        if (day.total_kcal) {
          parts.push(`${Math.round(day.total_kcal)} –∫–∫–∞–ª`);
        }
        if (day.total_protein) {
          parts.push(`–ë ${day.total_protein.toFixed(0)}–≥`);
        }
        if (day.total_fat) {
          parts.push(`–ñ ${day.total_fat.toFixed(0)}–≥`);
        }
        if (day.total_carbs) {
          parts.push(`–£ ${day.total_carbs.toFixed(0)}–≥`);
        }
        
        dayLine += parts.join(' | ');
        message += dayLine + '\n';
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π
    const goals = await getUserGoals(userId);
    if (goals && Object.values(goals).some(v => v !== null)) {
      message += `\nüéØ –ê–ù–ê–õ–ò–ó –¶–ï–õ–ï–ô:\n`;
      
      if (goals.calories_goal) {
        const avgPercent = Math.round((current.avg_kcal / goals.calories_goal) * 100);
        const emoji = avgPercent >= 90 ? '‚úÖ' : avgPercent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
        message += `‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${avgPercent}% –æ—Ç —Ü–µ–ª–∏ (${goals.calories_goal} –∫–∫–∞–ª/–¥–µ–Ω—å) ${emoji}\n`;
      }
      
      if (goals.protein_goal) {
        const avgPercent = Math.round((current.avg_protein / goals.protein_goal) * 100);
        const emoji = avgPercent >= 90 ? '‚úÖ' : avgPercent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
        message += `‚Ä¢ –ë–µ–ª–∫–∏: ${avgPercent}% –æ—Ç —Ü–µ–ª–∏ (${goals.protein_goal}–≥/–¥–µ–Ω—å) ${emoji}\n`;
      }
      
      if (goals.fat_goal) {
        const avgPercent = Math.round((current.avg_fat / goals.fat_goal) * 100);
        const emoji = avgPercent >= 90 ? '‚úÖ' : avgPercent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
        message += `‚Ä¢ –ñ–∏—Ä—ã: ${avgPercent}% –æ—Ç —Ü–µ–ª–∏ (${goals.fat_goal}–≥/–¥–µ–Ω—å) ${emoji}\n`;
      }
      
      if (goals.carbs_goal) {
        const avgPercent = Math.round((current.avg_carbs / goals.carbs_goal) * 100);
        const emoji = avgPercent >= 90 ? '‚úÖ' : avgPercent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
        message += `‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: ${avgPercent}% –æ—Ç —Ü–µ–ª–∏ (${goals.carbs_goal}–≥/–¥–µ–Ω—å) ${emoji}\n`;
      }
      
      if (goals.fiber_goal) {
        const avgPercent = Math.round((current.avg_fiber / goals.fiber_goal) * 100);
        const emoji = avgPercent >= 90 ? '‚úÖ' : avgPercent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
        message += `‚Ä¢ –ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${avgPercent}% –æ—Ç —Ü–µ–ª–∏ (${goals.fiber_goal}–≥/–¥–µ–Ω—å) ${emoji}\n`;
      }
    }
    
    await ctx.reply(message);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /week:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  } finally {
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "week", Date.now()-t0]);
  }
});

// –∫–æ–º–∞–Ω–¥–∞ /month –¥–ª—è –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.command("month", async (ctx) => {
  const t0 = Date.now();
  
  try {
    const userId = String(ctx.from.id);
    const stats = await getMonthlyStats(userId);
    
    if (!stats) {
      return ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ó–∞–ø–∏—Å—ã–≤–∞–π –µ–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π!");
    }
    
    const current = stats.current;
    const previous = stats.previous;
    const weeklyTrends = stats.weeklyTrends;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ (–≤–∫–ª—é—á–∞—è –Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã)
    const hasCurrentData = current && (current.avg_kcal || current.avg_protein || current.avg_fat || current.avg_carbs || current.avg_fiber);
    const hasWeeklyData = weeklyTrends && weeklyTrends.length > 0;
    
    if (!hasCurrentData && !hasWeeklyData) {
      return ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ó–∞–ø–∏—Å—ã–≤–∞–π –µ–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π!");
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
    const monthName = new Date().toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' });
    
    // –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤
    const kcalTrend = previous.avg_kcal ? 
      (current.avg_kcal - previous.avg_kcal).toFixed(0) : 0;
    const proteinTrend = previous.avg_protein ? 
      (current.avg_protein - previous.avg_protein).toFixed(1) : 0;
    
    const kcalEmoji = kcalTrend > 0 ? '‚ÜóÔ∏è' : kcalTrend < 0 ? '‚ÜòÔ∏è' : '‚û°Ô∏è';
    const proteinEmoji = proteinTrend > 0 ? '‚ÜóÔ∏è' : proteinTrend < 0 ? '‚ÜòÔ∏è' : '‚û°Ô∏è';
    
    let message = `üìä –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (${monthName})\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (hasCurrentData) {
      message += `üçΩÔ∏è –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n`;
      
      if (current && current.avg_kcal) {
        message += `‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${Math.round(current.avg_kcal)} –∫–∫–∞–ª/–¥–µ–Ω—å\n`;
      }
      if (current && current.avg_protein) {
        message += `‚Ä¢ –ë–µ–ª–∫–∏: ${current.avg_protein.toFixed(1)}–≥/–¥–µ–Ω—å\n`;
      }
      if (current && current.avg_fat) {
        message += `‚Ä¢ –ñ–∏—Ä—ã: ${current.avg_fat.toFixed(1)}–≥/–¥–µ–Ω—å\n`;
      }
      if (current && current.avg_carbs) {
        message += `‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: ${current.avg_carbs.toFixed(1)}–≥/–¥–µ–Ω—å\n`;
      }
      if (current && current.avg_fiber) {
        message += `‚Ä¢ –ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${current.avg_fiber.toFixed(1)}–≥/–¥–µ–Ω—å\n`;
      }
      message += '\n';
    }
    
    if (previous && (previous.avg_kcal || previous.avg_protein)) {
      message += `üìà –¢–†–ï–ù–î–´:\n`;
      if (previous.avg_kcal && current.avg_kcal) {
        message += `‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${kcalEmoji} ${kcalTrend > 0 ? '+' : ''}${kcalTrend} –∫–∫–∞–ª/–¥–µ–Ω—å (vs –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü)\n`;
      }
      if (previous.avg_protein && current.avg_protein) {
        message += `‚Ä¢ –ë–µ–ª–∫–∏: ${proteinEmoji} ${proteinTrend > 0 ? '+' : ''}${proteinTrend}–≥/–¥–µ–Ω—å (vs –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü)\n`;
      }
      message += '\n';
    }
    
    // –ù–µ–¥–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    if (hasWeeklyData) {
      message += `üìÖ –ù–ï–î–ï–õ–¨–ù–´–ï –¢–†–ï–ù–î–´:\n`;
      weeklyTrends.forEach((week, index) => {
        if (week.avg_kcal) {
          message += `‚Ä¢ ${index + 1}-—è –Ω–µ–¥–µ–ª—è: ${Math.round(week.avg_kcal)} –∫–∫–∞–ª/–¥–µ–Ω—å\n`;
        }
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π
    const goals = await getUserGoals(userId);
    if (goals && Object.values(goals).some(v => v !== null)) {
      message += `\nüéØ –ê–ù–ê–õ–ò–ó –¶–ï–õ–ï–ô:\n`;
      
      if (goals.calories_goal) {
        const avgPercent = Math.round((current.avg_kcal / goals.calories_goal) * 100);
        const emoji = avgPercent >= 90 ? '‚úÖ' : avgPercent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
        message += `‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${avgPercent}% –æ—Ç —Ü–µ–ª–∏ (${goals.calories_goal} –∫–∫–∞–ª/–¥–µ–Ω—å) ${emoji}\n`;
      }
      
      if (goals.protein_goal) {
        const avgPercent = Math.round((current.avg_protein / goals.protein_goal) * 100);
        const emoji = avgPercent >= 90 ? '‚úÖ' : avgPercent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
        message += `‚Ä¢ –ë–µ–ª–∫–∏: ${avgPercent}% –æ—Ç —Ü–µ–ª–∏ (${goals.protein_goal}–≥/–¥–µ–Ω—å) ${emoji}\n`;
      }
      
      if (goals.fat_goal) {
        const avgPercent = Math.round((current.avg_fat / goals.fat_goal) * 100);
        const emoji = avgPercent >= 90 ? '‚úÖ' : avgPercent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
        message += `‚Ä¢ –ñ–∏—Ä—ã: ${avgPercent}% –æ—Ç —Ü–µ–ª–∏ (${goals.fat_goal}–≥/–¥–µ–Ω—å) ${emoji}\n`;
      }
      
      if (goals.carbs_goal) {
        const avgPercent = Math.round((current.avg_carbs / goals.carbs_goal) * 100);
        const emoji = avgPercent >= 90 ? '‚úÖ' : avgPercent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
        message += `‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: ${avgPercent}% –æ—Ç —Ü–µ–ª–∏ (${goals.carbs_goal}–≥/–¥–µ–Ω—å) ${emoji}\n`;
      }
      
      if (goals.fiber_goal) {
        const avgPercent = Math.round((current.avg_fiber / goals.fiber_goal) * 100);
        const emoji = avgPercent >= 90 ? '‚úÖ' : avgPercent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
        message += `‚Ä¢ –ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${avgPercent}% –æ—Ç —Ü–µ–ª–∏ (${goals.fiber_goal}–≥/–¥–µ–Ω—å) ${emoji}\n`;
      }
    }
    
    await ctx.reply(message);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /month:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  } finally {
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "month", Date.now()-t0]);
  }
});

// ==================== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –¶–ï–õ–Ø–ú–ò ====================

// –ö–æ–º–∞–Ω–¥–∞ /goal - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ª–µ–π
bot.command("goal", async (ctx) => {
  const t0 = Date.now();
  
  try {
    const userId = String(ctx.from.id);
    const args = ctx.message.text.split(' ');
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
    if (args.length > 1) {
      const action = args[1].toLowerCase();
      
      if (action === 'set' && args.length >= 4) {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏: /goal set calories 2000
        const goalType = args[2].toLowerCase();
        const value = parseFloat(args[3]);
        
        const validTypes = ['calories', 'protein', 'fat', 'carbs', 'fiber'];
        if (!validTypes.includes(goalType)) {
          return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ü–µ–ª–∏. –î–æ—Å—Ç—É–ø–Ω–æ: calories, protein, fat, carbs, fiber");
        }
        
        if (isNaN(value) || value <= 0) {
          return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.");
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        const ranges = {
          calories: { min: 500, max: 8000 },
          protein: { min: 20, max: 400 },
          fat: { min: 10, max: 200 },
          carbs: { min: 50, max: 800 },
          fiber: { min: 5, max: 80 }
        };
        
        if (value < ranges[goalType].min || value > ranges[goalType].max) {
          return ctx.reply(`‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${goalType} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${ranges[goalType].min} –¥–æ ${ranges[goalType].max}`);
        }
        
        const success = await setUserGoal(userId, goalType, value);
        if (success) {
          const goalNames = {
            calories: '–∫–∞–ª–æ—Ä–∏–∏',
            protein: '–±–µ–ª–∫–∏',
            fat: '–∂–∏—Ä—ã',
            carbs: '—É–≥–ª–µ–≤–æ–¥—ã',
            fiber: '–∫–ª–µ—Ç—á–∞—Ç–∫–∞'
          };
          await ctx.reply(`‚úÖ –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${goalNames[goalType]} = ${value}${goalType === 'calories' ? ' –∫–∫–∞–ª/–¥–µ–Ω—å' : '–≥/–¥–µ–Ω—å'}`);
        } else {
          await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
        return;
      }
      
      if (action === 'remove' && args.length >= 3) {
        // –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏: /goal remove calories
        const goalType = args[2].toLowerCase();
        const validTypes = ['calories', 'protein', 'fat', 'carbs', 'fiber'];
        
        if (!validTypes.includes(goalType)) {
          return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ü–µ–ª–∏. –î–æ—Å—Ç—É–ø–Ω–æ: calories, protein, fat, carbs, fiber");
        }
        
        const success = await removeUserGoal(userId, goalType);
        if (success) {
          const goalNames = {
            calories: '–∫–∞–ª–æ—Ä–∏–∏',
            protein: '–±–µ–ª–∫–∏',
            fat: '–∂–∏—Ä—ã',
            carbs: '—É–≥–ª–µ–≤–æ–¥—ã',
            fiber: '–∫–ª–µ—Ç—á–∞—Ç–∫–∞'
          };
          await ctx.reply(`‚úÖ –¶–µ–ª—å –ø–æ ${goalNames[goalType]} —É–¥–∞–ª–µ–Ω–∞`);
        } else {
          await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
        return;
      }
      
      if (action === 'reset') {
        // –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ü–µ–ª–µ–π: /goal reset
        const success = await resetUserGoals(userId);
        if (success) {
          await ctx.reply("‚úÖ –í—Å–µ —Ü–µ–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã");
        } else {
          await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ü–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
        return;
      }
      
      if (action === 'progress') {
        // –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: /goal progress
        const goals = await getUserGoals(userId);
        const todayData = await getTodayNutrition(userId);
        const progress = calculateProgress(goals, todayData);
        const message = formatProgressMessage(progress);
        
        const kb = new InlineKeyboard()
          .text("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏", "goal:set")
          .text("–ú–æ–∏ —Ü–µ–ª–∏", "goal:view");
        
        await ctx.reply(message, { reply_markup: kb });
        return;
      }
    }
    
    // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const goals = await getUserGoals(userId);
    const message = formatGoalsMessage(goals);
    
    const kb = new InlineKeyboard()
      .text("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏", "goal:set")
      .text("–ü—Ä–æ–≥—Ä–µ—Å—Å", "goal:progress")
      .row()
      .text("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ", "goal:reset");
    
    await ctx.reply(message, { reply_markup: kb });
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /goal:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ü–µ–ª—è–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  } finally {
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "goal", Date.now()-t0]);
  }
});

// –∫–æ–º–∞–Ω–¥–∞ /admin_help –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ —Ç—Ä–µ–Ω–µ—Ä–∞
bot.command("admin_help", async (ctx) => {
  const userId = String(ctx.from.id);
  const isAdmin = userId === process.env.ADMIN_TG_ID;
  const isTrainer = userId === process.env.TRAINER_TG_ID;
  
  if (!isAdmin && !isTrainer) {
    return ctx.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ —Ç—Ä–µ–Ω–µ—Ä—É.");
  }

  let helpText = `üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Ç—Ä–µ–Ω–µ—Ä–∞:\n\n`;
  
  if (isAdmin) {
    helpText += `üëë –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†:\n`;
    helpText += `‚Ä¢ /mvpstats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n`;
    helpText += `‚Ä¢ /myid ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π Telegram ID\n`;
    helpText += `‚Ä¢ /parse <—Ç–µ–∫—Å—Ç> ‚Äî —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞\n\n`;
  }
  
  if (isTrainer) {
    helpText += `üèãÔ∏è –¢–†–ï–ù–ï–†:\n`;
    helpText += `‚Ä¢ /inbox ‚Äî –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω\n`;
    helpText += `‚Ä¢ /inbox new ‚Äî –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–Ω–æ–≤—ã–µ"\n`;
    helpText += `‚Ä¢ /inbox in_progress ‚Äî –∑–∞—è–≤–∫–∏ "–≤ —Ä–∞–±–æ—Ç–µ"\n`;
    helpText += `‚Ä¢ /inbox done ‚Äî –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏\n`;
    helpText += `‚Ä¢ /inbox rejected ‚Äî –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏\n\n`;
  }
  
  helpText += `üìã –û–ë–©–ò–ï –ö–û–ú–ê–ù–î–´:\n`;
  helpText += `‚Ä¢ /day ‚Äî –∏—Ç–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n`;
  helpText += `‚Ä¢ /day –≤—á–µ—Ä–∞ ‚Äî –∏—Ç–æ–≥–∏ –∑–∞ –≤—á–µ—Ä–∞\n`;
  helpText += `‚Ä¢ /day 21.09.2025 ‚Äî –∏—Ç–æ–≥–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É\n`;
  helpText += `‚Ä¢ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n`;
  helpText += `‚Ä¢ /help ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n`;
  
  helpText += `üí° –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–Ø–í–ö–ê–ú–ò:\n`;
  helpText += `‚Ä¢ –í /inbox –Ω–∞–∂–º–∏ "–û—Ç–∫—Ä—ã—Ç—å #ID" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π\n`;
  helpText += `‚Ä¢ –í –∫–∞—Ä—Ç–æ—á–∫–µ –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∞–º–∏\n`;
  helpText += `‚Ä¢ –°—Ç–∞—Ç—É—Å—ã: new ‚Üí in_progress ‚Üí done/rejected\n\n`;
  
  helpText += `üìä –ú–ï–¢–†–ò–ö–ò (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω):\n`;
  helpText += `‚Ä¢ DAU ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –¥–µ–Ω—å\n`;
  helpText += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–∏–ø–∞–º\n`;
  helpText += `‚Ä¢ –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å ‚Äî –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–∏—Å–æ–≤`;

  await ctx.reply(helpText);
});

// —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /parse
bot.command("parse", async (ctx) => {
  const text = ctx.message.text.replace(/^\/parse\s*/i, "").trim();
  if (!text) return ctx.reply("–ü—Ä–∏–º–µ—Ä: /parse –≤—á–µ—Ä–∞ 2 –∫—É—Å–∫–∞ –ø–∏—Ü—Ü—ã –∏ –∫–æ–ª–∞ 0.5 –≤ 20:00");

  try {
    const items = await parseFoodTextStructured(text, "Europe/Warsaw");
    const pretty = items.map(i =>
      `‚Ä¢ ${i.name}: ${i.qty} ${i.unit}` +
      (i.datetime ? ` @ ${i.datetime}` : ``) +
      ` | per100g kcal:${i.per100g.kcal}`
    ).join("\n");
    await ctx.reply(pretty || "–ü—É—Å—Ç–æ");
  } catch (e) {
    console.error(e);
    await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ —Å—Ö–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ñ—Ä–∞–∑—É.");
  }
});

// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message:voice", async (ctx) => {
  const t0 = Date.now();
  
  try {
    // Rate-limit –∑–∞—â–∏—Ç–∞
    if (!(await guardRate(ctx))) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–∞
    if ((ctx.message.voice?.duration || 0) > 60) {
      return ctx.reply("–ê—É–¥–∏–æ –¥–ª–∏–Ω–Ω–µ–µ 60 —Å–µ–∫. –°–∫–∞–∂–∏ –∫–æ—Ä–æ—á–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–º üôè");
    }
    await ctx.reply("–°–µ–∫—É–Ω–¥—É, —Ä–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å‚Ä¶");

    // 1) –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
    const file = await ctx.api.getFile(ctx.message.voice.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;

    // 2) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ wav
    const tmpDir = path.join(process.cwd(), "tmp");
    if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);
    const oggPath = path.join(tmpDir, `voice_${Date.now()}.oga`);
    const wavPath = path.join(tmpDir, `voice_${Date.now()}.wav`);

    const res = await fetch(fileUrl);
    const buf = Buffer.from(await res.arrayBuffer());
    fs.writeFileSync(oggPath, buf);

    await oggToWav(oggPath, wavPath);

    // 3) —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const text = await withTimeout(transcribeAudio(wavPath), 20000, "–°–µ—Ä–≤–∏—Å—ã –¥—É–º–∞—é—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º.");
    
    // 4) —É–±–æ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    fs.unlink(oggPath, () => {});
    fs.unlink(wavPath, () => {});

    if (!text) {
      return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å —á—É—Ç—å —á—ë—Ç—á–µ, –±–ª–∏–∂–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º üìù");
    }

    // 5) —Å—Ä–∞–∑—É –ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ –ø–∞–π–ø–ª–∞–π–Ω
    await handleFoodText(ctx, text);
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞:", e);
    await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º üìù");
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "error", Date.now()-t0]);
  } finally {
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "voice", Date.now()-t0]);
  }
});

// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
bot.on("message:photo", async (ctx) => {
  const t0 = Date.now();
  
  try {
    // Rate-limit –∑–∞—â–∏—Ç–∞
    if (!(await guardRate(ctx))) return;
    await ctx.reply("–°–µ–∫—É–Ω–¥—É, —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ñ–æ—Ç–æ‚Ä¶");

    const photos = ctx.message.photo; // –º–∞—Å—Å–∏–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤; –±–µ—Ä—ë–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä
    const chosen = photos[Math.max(0, photos.length - 2)]; // –Ω–µ —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π
    const dataUrl = await downloadPhotoAsDataUrl(ctx.api, chosen.file_id);
    const caption = ctx.message.caption?.trim() || ""; // –µ—Å–ª–∏ —é–∑–µ—Ä —á—Ç–æ-—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª

    const items = await withTimeout(parseFoodImageStructured(dataUrl, "Europe/Warsaw", caption), 20000, "–°–µ—Ä–≤–∏—Å—ã –¥—É–º–∞—é—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º.");

    // –∫–∞–∫ –∏ –≤ —Ç–µ–∫—Å—Ç–µ/–≥–æ–ª–æ—Å–µ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∏ –ø–æ–∑–∏—Ü–∏–∏
    const tgId = String(ctx.from.id);
    let userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [tgId]);
    if (userResult.rows.length === 0) {
      userResult = await client.query('INSERT INTO "User" ("tgId") VALUES ($1) RETURNING id', [tgId]);
    }
    const userId = userResult.rows[0].id;

    const rawText = caption ? `[photo] ${caption}` : "[photo]";
    const entryResult = await client.query(
      'INSERT INTO "FoodEntry" ("userId", date, "textRaw", "createdAt") VALUES ($1, $2, $3, $4) RETURNING id',
      [userId, new Date(), rawText, new Date()]
    );
    const entryId = entryResult.rows[0].id;

    let total = { kcal: 0, p: 0, f: 0, c: 0, fiber: 0 };
    for (const it of items) {
      const grams = resolveGrams({
        qty: it.qty,
        unit: it.unit,
        density: it.density_g_per_ml ?? null,
        pieceGrams: it.default_piece_grams ?? null,
        resolved_grams: it.resolved_grams ?? null,
      });
      const m = macrosFromPer100g(grams, it.per100g);
      total.kcal += m.kcal; 
      total.p += m.p; 
      total.f += m.f; 
      total.c += m.c; 
      total.fiber += m.fiber;

      await client.query(
        `INSERT INTO food_items(entry_id, name, qty, unit, resolved_grams, kcal, p, f, c, fiber, edited_by_user, created_at)
         VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, false, now())`,
        [entryId, it.name, it.qty, it.unit, grams, m.kcal, m.p, m.f, m.c, m.fiber]
      );
    }

    const lines = items.map(i => `‚Ä¢ ${i.name}: ${i.qty} ${i.unit}`).join("\n");
    const sum = `–ò—Ç–æ–≥–æ: ${Math.round(total.kcal)} –∫–∫–∞–ª | –ë ${total.p.toFixed(1)} | –ñ ${total.f.toFixed(1)} | –£ ${total.c.toFixed(1)} | –ö–ª ${total.fiber.toFixed(1)}`;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–æ–∫
    const { message, keyboard } = createFoodEntryResponse(entryId, lines, sum, "—Ñ–æ—Ç–æ");
    
    await ctx.reply(message, { reply_markup: keyboard });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:", e);
    
    let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ –±–ª–∏–∂–µ –∏ –Ω–∞ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–æ–≤—Å—è–Ω–∫–∞ 60 –≥, –±–∞–Ω–∞–Ω 1 —à—Ç¬ª).";
    
    if (e.message.includes("–°–µ—Ä–≤–∏—Å—ã –¥—É–º–∞—é—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ")) {
      errorMessage = "–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ –±–ª–∏–∂–µ –∏ –Ω–∞ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–æ–≤—Å—è–Ω–∫–∞ 60 –≥, –±–∞–Ω–∞–Ω 1 —à—Ç¬ª).";
    } else if (e.message.includes("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ")) {
      errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ –±–ª–∏–∂–µ –∏ –Ω–∞ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–æ–≤—Å—è–Ω–∫–∞ 60 –≥, –±–∞–Ω–∞–Ω 1 —à—Ç¬ª).";
    } else if (e.message.includes("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Vision API")) {
      errorMessage = "–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–æ–≤—Å—è–Ω–∫–∞ 60 –≥, –±–∞–Ω–∞–Ω 1 —à—Ç¬ª).";
    }
    
    await ctx.reply(errorMessage);
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "error", Date.now()-t0]);
  } finally {
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "photo", Date.now()-t0]);
  }
});

// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∏ —Ä–∞—Å—á—ë—Ç–æ–º –ö–ë–ñ–£
bot.on("message:text", async (ctx) => {
  const t0 = Date.now();
  
  try {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    if (ctx.message.text.startsWith('/') && !ctx.message.text.includes(' ')) {
      return;
    }

    // Rate-limit –∑–∞—â–∏—Ç–∞
    if (!(await guardRate(ctx))) return;

  const text = ctx.message.text.trim();
  const userId = String(ctx.from.id);
  let gramEditProcessed = false;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã –≥—Ä–∞–º–º—ã (–ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê)
  const editingItemId = pendingGramEdit.get(userId);
  if (editingItemId) {
    const grams = Number(String(text).replace(",", "."));
    if (!grams || grams <= 0) {
      await ctx.reply("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ > 0. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: 120");
      return;
    }

    try {
      // –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≥—Ä–∞–º–º—ã, —Å—á–∏—Ç–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
      const { rows } = await client.query(
        `SELECT entry_id, resolved_grams, kcal, p, f, c, fiber FROM food_items WHERE id=$1`, 
        [editingItemId]
      );
      
      if (!rows.length) { 
        pendingGramEdit.delete(userId); 
        await ctx.reply("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); 
        return; 
      }

      const it = rows[0];
      const k = grams / Number(it.resolved_grams);
      await client.query(
        `UPDATE food_items
         SET resolved_grams=$1,
             kcal=$2, p=$3, f=$4, c=$5, fiber=$6
         WHERE id=$7`,
        [grams,
         (it.kcal*k).toFixed(1), (it.p*k).toFixed(1), (it.f*k).toFixed(1), (it.c*k).toFixed(1), (it.fiber*k).toFixed(1),
         editingItemId]
      );

      pendingGramEdit.delete(userId);

      // –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [userId]);
      if (userResult.rows.length === 0) {
        await ctx.reply("–û–±–Ω–æ–≤–∏–ª. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
      }
      const dbUserId = userResult.rows[0].id;

      // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∏—Ç–æ–≥ –∑–∞ –¥–µ–Ω—å
      const { rows: totals } = await client.query(
        `SELECT COALESCE(SUM(fi.kcal),0) AS kcal, COALESCE(SUM(fi.p),0) AS p, COALESCE(SUM(fi.f),0) AS f, COALESCE(SUM(fi.c),0) AS c, COALESCE(SUM(fi.fiber),0) AS fiber
         FROM "FoodEntry" fe 
         JOIN food_items fi ON fi.entry_id=fe.id 
         WHERE fe."userId"=$1 AND fe."date"::date = CURRENT_DATE`,
        [dbUserId]
      );
      const t = totals[0];
      await ctx.reply(`–û–±–Ω–æ–≤–∏–ª. –ò—Ç–æ–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${Math.round(t.kcal)} –∫–∫–∞–ª | –ë ${(+t.p).toFixed(1)} | –ñ ${(+t.f).toFixed(1)} | –£ ${(+t.c).toFixed(1)} | –ö–ª ${(+t.fiber).toFixed(1)}`);
      gramEditProcessed = true;
      return;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞–º–º–æ–≤:", error);
      pendingGramEdit.delete(userId);
      await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.");
      return;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏ –º—ã —Ü–µ–ª—å
  const goalType = pendingGoalSetup.get(userId);
  if (goalType) {
    const value = parseFloat(text.replace(",", "."));
    
    if (isNaN(value) || value <= 0) {
      await ctx.reply("‚ùå –ù—É–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.");
      return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    const ranges = {
      calories: { min: 500, max: 8000 },
      protein: { min: 20, max: 400 },
      fat: { min: 10, max: 200 },
      carbs: { min: 50, max: 800 },
      fiber: { min: 5, max: 80 }
    };
    
    if (value < ranges[goalType].min || value > ranges[goalType].max) {
      await ctx.reply(`‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${goalType} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${ranges[goalType].min} –¥–æ ${ranges[goalType].max}`);
      return;
    }
    
    const success = await setUserGoal(userId, goalType, value);
    pendingGoalSetup.delete(userId);
    
    if (success) {
      const goalNames = {
        calories: '–∫–∞–ª–æ—Ä–∏–∏',
        protein: '–±–µ–ª–∫–∏',
        fat: '–∂–∏—Ä—ã',
        carbs: '—É–≥–ª–µ–≤–æ–¥—ã',
        fiber: '–∫–ª–µ—Ç—á–∞—Ç–∫–∞'
      };
      await ctx.reply(`‚úÖ –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${goalNames[goalType]} = ${value}${goalType === 'calories' ? ' –∫–∫–∞–ª/–¥–µ–Ω—å' : '–≥/–¥–µ–Ω—å'}`);
    } else {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ–º –ª–∏ –º—ã –∞–Ω–∫–µ—Ç—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
  const coachSession = pendingCoach.get(userId);
  if (coachSession) {
    if (coachSession.step === 1) {
      coachSession.draft.goal = text;
      coachSession.step = 2;
      
      const cancelKb = new InlineKeyboard()
        .text("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", "coach:cancel");
        
      return ctx.reply("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è/–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é?", { 
        reply_markup: cancelKb 
      });
    }
    if (coachSession.step === 2) {
      coachSession.draft.constraints = text;
      coachSession.step = 3;
      
      const cancelKb = new InlineKeyboard()
        .text("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", "coach:cancel");
        
      return ctx.reply("–†–æ—Å—Ç/–≤–µ—Å/–≤–æ–∑—Ä–∞—Å—Ç ‚Äî –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:", { 
        reply_markup: cancelKb 
      });
    }
    if (coachSession.step === 3) {
      coachSession.draft.stats = text;
      coachSession.step = 4;
      
      const cancelKb = new InlineKeyboard()
        .text("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", "coach:cancel");
        
      return ctx.reply("–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ–≥—Ä–∞–º @–Ω–∏–∫ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω):", { 
        reply_markup: cancelKb 
      });
    }
    if (coachSession.step === 4) {
      coachSession.draft.contact = text;

      try {
        // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        const { rows: u } = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [userId]);
        const dbUserId = u[0]?.id || null;

        await client.query(
          `INSERT INTO coach_requests(user_tg_id, user_id, goal, constraints, stats, contact, status, created_at)
           VALUES($1, $2, $3, $4, $5, $6, 'new', now())`,
          [userId, dbUserId, coachSession.draft.goal, coachSession.draft.constraints, coachSession.draft.stats, coachSession.draft.contact]
        );

        // —É–≤–µ–¥–æ–º–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞
        const summary =
          `üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω\n` +
          `–û—Ç: tg ${userId}\n` +
          `–¶–µ–ª—å: ${coachSession.draft.goal}\n` +
          `–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${coachSession.draft.constraints}\n` +
          `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${coachSession.draft.stats}\n` +
          `–ö–æ–Ω—Ç–∞–∫—Ç: ${coachSession.draft.contact}\n` +
          `–î–∞—Ç–∞: ${new Date().toLocaleString("ru-RU")}`;

        if (process.env.TRAINER_TG_ID) {
          try { 
            await ctx.api.sendMessage(process.env.TRAINER_TG_ID, summary); 
          } catch(e) { 
            console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–Ω–µ—Ä—É:", e); 
          }
        }

        pendingCoach.delete(userId);
        return ctx.reply("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä—É ‚úÖ. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –ª–∏—á–∫–µ.");
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", error);
        pendingCoach.delete(userId);
        return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
      }
    }
  }


  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–Ω—è
  if (await checkDayTriggers(ctx, text)) {
    return;
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –µ–¥—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –≥—Ä–∞–º–º—ã)
  if (!gramEditProcessed) {
    await handleFoodText(ctx, text);
  }
  
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–∞:", e);
    await ctx.reply("–•–º–º, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.");
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "error", Date.now()-t0]);
    return;
  } finally {
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "text", Date.now()-t0]);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function getWeeklyStats(userId) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { rows: userRows } = await client.query(`
      SELECT id FROM "User" WHERE "tgId" = $1
    `, [userId]);
    
    if (userRows.length === 0) {
      return {
        current: null,
        previous: null,
        daily: []
      };
    }
    
    const internalUserId = userRows[0].id;
    
    // –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    const currentWeek = await client.query(`
      SELECT 
        AVG(fi.kcal) as avg_kcal,
        AVG(fi.p) as avg_protein,
        AVG(fi.f) as avg_fat,
        AVG(fi.c) as avg_carbs,
        AVG(fi.fiber) as avg_fiber
      FROM "FoodEntry" fe
      JOIN food_items fi ON fi.entry_id = fe.id
      WHERE fe."userId" = $1 
        AND fe.date >= CURRENT_DATE - INTERVAL '7 days'
        AND fe.date < CURRENT_DATE
    `, [internalUserId]);

    // –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è (7-14 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
    const prevWeek = await client.query(`
      SELECT 
        AVG(fi.kcal) as avg_kcal,
        AVG(fi.p) as avg_protein,
        AVG(fi.f) as avg_fat,
        AVG(fi.c) as avg_carbs,
        AVG(fi.fiber) as avg_fiber
      FROM "FoodEntry" fe
      JOIN food_items fi ON fi.entry_id = fe.id
      WHERE fe."userId" = $1 
        AND fe.date >= CURRENT_DATE - INTERVAL '14 days'
        AND fe.date < CURRENT_DATE - INTERVAL '7 days'
    `, [internalUserId]);

    // –î–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    const dailyData = await client.query(`
      SELECT 
        fe.date::date as day,
        SUM(fi.kcal) as total_kcal,
        SUM(fi.p) as total_protein,
        SUM(fi.f) as total_fat,
        SUM(fi.c) as total_carbs,
        SUM(fi.fiber) as total_fiber
      FROM "FoodEntry" fe
      JOIN food_items fi ON fi.entry_id = fe.id
      WHERE fe."userId" = $1 
        AND fe.date >= CURRENT_DATE - INTERVAL '7 days'
        AND fe.date < CURRENT_DATE
      GROUP BY fe.date::date
      ORDER BY fe.date::date DESC
    `, [internalUserId]);

    return {
      current: currentWeek.rows[0] || null,
      previous: prevWeek.rows[0] || null,
      daily: dailyData.rows || []
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function getMonthlyStats(userId) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { rows: userRows } = await client.query(`
      SELECT id FROM "User" WHERE "tgId" = $1
    `, [userId]);
    
    if (userRows.length === 0) {
      return {
        current: null,
        previous: null,
        weeklyTrends: []
      };
    }
    
    const internalUserId = userRows[0].id;
    
    // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const currentMonth = await client.query(`
      SELECT 
        AVG(fi.kcal) as avg_kcal,
        AVG(fi.p) as avg_protein,
        AVG(fi.f) as avg_fat,
        AVG(fi.c) as avg_carbs,
        AVG(fi.fiber) as avg_fiber
      FROM "FoodEntry" fe
      JOIN food_items fi ON fi.entry_id = fe.id
      WHERE fe."userId" = $1 
        AND fe.date >= DATE_TRUNC('month', CURRENT_DATE)
        AND fe.date < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month'
    `, [internalUserId]);

    // –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
    const prevMonth = await client.query(`
      SELECT 
        AVG(fi.kcal) as avg_kcal,
        AVG(fi.p) as avg_protein,
        AVG(fi.f) as avg_fat,
        AVG(fi.c) as avg_carbs,
        AVG(fi.fiber) as avg_fiber
      FROM "FoodEntry" fe
      JOIN food_items fi ON fi.entry_id = fe.id
      WHERE fe."userId" = $1 
        AND fe.date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'
        AND fe.date < DATE_TRUNC('month', CURRENT_DATE)
    `, [internalUserId]);

    // –ù–µ–¥–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤–Ω—É—Ç—Ä–∏ –º–µ—Å—è—Ü–∞
    const weeklyTrends = await client.query(`
      SELECT 
        EXTRACT(week FROM fe.date) as week_num,
        AVG(fi.kcal) as avg_kcal
      FROM "FoodEntry" fe
      JOIN food_items fi ON fi.entry_id = fe.id
      WHERE fe."userId" = $1 
        AND fe.date >= DATE_TRUNC('month', CURRENT_DATE)
        AND fe.date < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month'
      GROUP BY EXTRACT(week FROM fe.date)
      ORDER BY week_num
    `, [internalUserId]);

    return {
      current: currentMonth.rows[0] || null,
      previous: prevMonth.rows[0] || null,
      weeklyTrends: weeklyTrends.rows || []
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    return null;
  }
}

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –¶–ï–õ–Ø–ú–ò ====================

// –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserGoals(userId) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { rows: userRows } = await client.query(`
      SELECT id FROM "User" WHERE "tgId" = $1
    `, [userId]);
    
    if (userRows.length === 0) {
      return {
        calories_goal: null,
        protein_goal: null,
        fat_goal: null,
        carbs_goal: null,
        fiber_goal: null
      };
    }
    
    const internalUserId = userRows[0].id;
    
    const { rows } = await client.query(`
      SELECT calories_goal, protein_goal, fat_goal, carbs_goal, fiber_goal
      FROM user_goals 
      WHERE user_id = $1
    `, [internalUserId]);
    
    return rows[0] || {
      calories_goal: null,
      protein_goal: null,
      fat_goal: null,
      carbs_goal: null,
      fiber_goal: null
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π:", error);
    return null;
  }
}

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function setUserGoal(userId, goalType, value) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ User
    const { rows: userRows } = await client.query(`
      SELECT id FROM "User" WHERE "tgId" = $1
    `, [userId]);
    
    let internalUserId;
    if (userRows.length > 0) {
      internalUserId = userRows[0].id;
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { rows: newUser } = await client.query(`
        INSERT INTO "User" ("tgId", "createdAt") VALUES ($1, now()) RETURNING id
      `, [userId]);
      internalUserId = newUser[0].id;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { rows: existing } = await client.query(`
      SELECT id FROM user_goals WHERE user_id = $1
    `, [internalUserId]);
    
    if (existing.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      await client.query(`
        UPDATE user_goals 
        SET ${goalType}_goal = $2, updated_at = now()
        WHERE user_id = $1
      `, [internalUserId, value]);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      const goalData = {
        user_id: internalUserId,
        calories_goal: null,
        protein_goal: null,
        fat_goal: null,
        carbs_goal: null,
        fiber_goal: null
      };
      goalData[`${goalType}_goal`] = value;
      
      await client.query(`
        INSERT INTO user_goals (user_id, calories_goal, protein_goal, fat_goal, carbs_goal, fiber_goal)
        VALUES ($1, $2, $3, $4, $5, $6)
      `, [
        internalUserId,
        goalData.calories_goal,
        goalData.protein_goal,
        goalData.fat_goal,
        goalData.carbs_goal,
        goalData.fiber_goal
      ]);
    }
    
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–∏:", error);
    return false;
  }
}

// –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function removeUserGoal(userId, goalType) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { rows: userRows } = await client.query(`
      SELECT id FROM "User" WHERE "tgId" = $1
    `, [userId]);
    
    if (userRows.length === 0) {
      return false;
    }
    
    const internalUserId = userRows[0].id;
    
    await client.query(`
      UPDATE user_goals 
      SET ${goalType}_goal = NULL, updated_at = now()
      WHERE user_id = $1
    `, [internalUserId]);
    
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏:", error);
    return false;
  }
}

// –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function resetUserGoals(userId) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { rows: userRows } = await client.query(`
      SELECT id FROM "User" WHERE "tgId" = $1
    `, [userId]);
    
    if (userRows.length === 0) {
      return false;
    }
    
    const internalUserId = userRows[0].id;
    
    await client.query(`
      DELETE FROM user_goals WHERE user_id = $1
    `, [internalUserId]);
    
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ü–µ–ª–µ–π:", error);
    return false;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
async function getTodayNutrition(userId) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { rows: userRows } = await client.query(`
      SELECT id FROM "User" WHERE "tgId" = $1
    `, [userId]);
    
    if (userRows.length === 0) {
      return {
        total_kcal: 0,
        total_protein: 0,
        total_fat: 0,
        total_carbs: 0,
        total_fiber: 0
      };
    }
    
    const internalUserId = userRows[0].id;
    
    const { rows } = await client.query(`
      SELECT 
        SUM(fi.kcal) as total_kcal,
        SUM(fi.p) as total_protein,
        SUM(fi.f) as total_fat,
        SUM(fi.c) as total_carbs,
        SUM(fi.fiber) as total_fiber
      FROM "FoodEntry" fe
      JOIN food_items fi ON fi.entry_id = fe.id
      WHERE fe."userId" = $1 
        AND fe.date::date = CURRENT_DATE
    `, [internalUserId]);
    
    return rows[0] || {
      total_kcal: 0,
      total_protein: 0,
      total_fat: 0,
      total_carbs: 0,
      total_fiber: 0
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è:", error);
    return {
      total_kcal: 0,
      total_protein: 0,
      total_fat: 0,
      total_carbs: 0,
      total_fiber: 0
    };
  }
}

// –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª—è–º
function calculateProgress(goals, todayData) {
  const progress = {};
  
  if (goals.calories_goal && goals.calories_goal > 0) {
    progress.calories = {
      current: Math.round(todayData.total_kcal || 0),
      goal: goals.calories_goal,
      percent: Math.round(((todayData.total_kcal || 0) / goals.calories_goal) * 100)
    };
  }
  
  if (goals.protein_goal && goals.protein_goal > 0) {
    progress.protein = {
      current: Math.round((todayData.total_protein || 0) * 10) / 10,
      goal: goals.protein_goal,
      percent: Math.round(((todayData.total_protein || 0) / goals.protein_goal) * 100)
    };
  }
  
  if (goals.fat_goal && goals.fat_goal > 0) {
    progress.fat = {
      current: Math.round((todayData.total_fat || 0) * 10) / 10,
      goal: goals.fat_goal,
      percent: Math.round(((todayData.total_fat || 0) / goals.fat_goal) * 100)
    };
  }
  
  if (goals.carbs_goal && goals.carbs_goal > 0) {
    progress.carbs = {
      current: Math.round((todayData.total_carbs || 0) * 10) / 10,
      goal: goals.carbs_goal,
      percent: Math.round(((todayData.total_carbs || 0) / goals.carbs_goal) * 100)
    };
  }
  
  if (goals.fiber_goal && goals.fiber_goal > 0) {
    progress.fiber = {
      current: Math.round((todayData.total_fiber || 0) * 10) / 10,
      goal: goals.fiber_goal,
      percent: Math.round(((todayData.total_fiber || 0) / goals.fiber_goal) * 100)
    };
  }
  
  return progress;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
function formatProgressMessage(progress) {
  if (Object.keys(progress).length === 0) {
    return "üéØ –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–ª–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /goal set –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–π.";
  }
  
  let message = "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª—è–º (—Å–µ–≥–æ–¥–Ω—è):\n\nüçΩÔ∏è –ü–ò–¢–ê–ù–ò–ï:\n";
  
  if (progress.calories) {
    const emoji = progress.calories.percent >= 90 ? '‚úÖ' : progress.calories.percent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
    message += `‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${progress.calories.current}/${progress.calories.goal} –∫–∫–∞–ª (${progress.calories.percent}%) ${emoji}\n`;
  }
  
  if (progress.protein) {
    const emoji = progress.protein.percent >= 90 ? '‚úÖ' : progress.protein.percent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
    message += `‚Ä¢ –ë–µ–ª–∫–∏: ${progress.protein.current}/${progress.protein.goal}–≥ (${progress.protein.percent}%) ${emoji}\n`;
  }
  
  if (progress.fat) {
    const emoji = progress.fat.percent >= 90 ? '‚úÖ' : progress.fat.percent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
    message += `‚Ä¢ –ñ–∏—Ä—ã: ${progress.fat.current}/${progress.fat.goal}–≥ (${progress.fat.percent}%) ${emoji}\n`;
  }
  
  if (progress.carbs) {
    const emoji = progress.carbs.percent >= 90 ? '‚úÖ' : progress.carbs.percent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
    message += `‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: ${progress.carbs.current}/${progress.carbs.goal}–≥ (${progress.carbs.percent}%) ${emoji}\n`;
  }
  
  if (progress.fiber) {
    const emoji = progress.fiber.percent >= 90 ? '‚úÖ' : progress.fiber.percent >= 70 ? '‚ö†Ô∏è' : '‚ùå';
    message += `‚Ä¢ –ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${progress.fiber.current}/${progress.fiber.goal}–≥ (${progress.fiber.percent}%) ${emoji}\n`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const recommendations = [];
  if (progress.calories && progress.calories.percent < 70) {
    recommendations.push("‚Ä¢ –î–æ–±–∞–≤—å –∫–∞–ª–æ—Ä–∏–∏ (–æ—Ä–µ—Ö–∏, –∞–≤–æ–∫–∞–¥–æ, –º–∞—Å–ª–æ)");
  }
  if (progress.protein && progress.protein.percent < 70) {
    recommendations.push("‚Ä¢ –£–≤–µ–ª–∏—á—å –±–µ–ª–∫–∏ (–º—è—Å–æ, —Ä—ã–±–∞, —è–π—Ü–∞, —Ç–≤–æ—Ä–æ–≥)");
  }
  if (progress.carbs && progress.carbs.percent < 70) {
    recommendations.push("‚Ä¢ –î–æ–±–∞–≤—å —É–≥–ª–µ–≤–æ–¥—ã (–æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, –∫—Ä—É–ø—ã)");
  }
  if (progress.fiber && progress.fiber.percent < 70) {
    recommendations.push("‚Ä¢ –£–≤–µ–ª–∏—á—å –∫–ª–µ—Ç—á–∞—Ç–∫—É (–æ–≤–æ—â–∏, —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ã–µ)");
  }
  
  if (recommendations.length > 0) {
    message += "\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n" + recommendations.join("\n");
  }
  
  return message;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–ª—è–º–∏
function formatGoalsMessage(goals) {
  if (!goals || Object.values(goals).every(v => v === null)) {
    return "üéØ –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–ª–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /goal set –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–π.";
  }
  
  let message = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é:\n\nüçΩÔ∏è –ü–ò–¢–ê–ù–ò–ï:\n";
  
  if (goals.calories_goal) {
    message += `‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${goals.calories_goal} –∫–∫–∞–ª/–¥–µ–Ω—å\n`;
  }
  
  if (goals.protein_goal) {
    message += `‚Ä¢ –ë–µ–ª–∫–∏: ${goals.protein_goal}–≥/–¥–µ–Ω—å\n`;
  }
  
  if (goals.fat_goal) {
    message += `‚Ä¢ –ñ–∏—Ä—ã: ${goals.fat_goal}–≥/–¥–µ–Ω—å\n`;
  }
  
  if (goals.carbs_goal) {
    message += `‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: ${goals.carbs_goal}–≥/–¥–µ–Ω—å\n`;
  }
  
  if (goals.fiber_goal) {
    message += `‚Ä¢ –ö–ª–µ—Ç—á–∞—Ç–∫–∞: ${goals.fiber_goal}–≥/–¥–µ–Ω—å\n`;
  }
  
  return message;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", err);
});

// –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è healthcheck Railway
const server = http.createServer((req, res) => {
  if (req.url === '/' && req.method === 'GET') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ 
      status: 'ok', 
      service: 'nutrition-bot',
      timestamp: new Date().toISOString()
    }));
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
bot.start().catch(error => {
  if (error.error_code === 409) {
    console.log("‚ö†Ô∏è  –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...");
    process.exit(0);
  } else {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", error);
    process.exit(1);
  }
});
console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...");