require("dotenv").config();
const { Bot, InlineKeyboard } = require("grammy");
const { Client } = require("pg");
const { parseFoodTextStructured, resolveGrams, macrosFromPer100g } = require("./llm");
const { parseFoodImageStructured } = require("./vision");
const ffmpeg = require("fluent-ffmpeg");
const ffmpegPath = require("ffmpeg-static");
const fs = require("fs");
const path = require("path");
const OpenAI = require("openai");
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

ffmpeg.setFfmpegPath(ffmpegPath);

const client = new Client({
  host: 'localhost',
  port: 5433,
  database: 'foodbot',
  user: 'postgres',
  password: 'postgres',
  ssl: false
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
client.connect().then(() => {
  console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ");
}).catch(err => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:", err);
  process.exit(1);
});

const bot = new Bot(process.env.BOT_TOKEN);

// State –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥—Ä–∞–º–º–æ–≤
const pendingGramEdit = new Map(); // userId -> itemId

// State –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–∫–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
const pendingCoach = new Map(); // userId -> { step: 1..4, draft: {...} }

// Rate-limit –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (in-memory)
const userBucket = new Map(); // tgId -> { ts[], limit, windowMs }
const LIMIT = 8, WINDOW_MS = 60_000;

function allowEvent(tgId) {
  const now = Date.now();
  const rec = userBucket.get(tgId) || { ts: [] };
  // –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ
  rec.ts = rec.ts.filter(t => now - t < WINDOW_MS);
  if (rec.ts.length >= LIMIT) { 
    userBucket.set(tgId, rec); 
    return false; 
  }
  rec.ts.push(now); 
  userBucket.set(tgId, rec);
  return true;
}

async function guardRate(ctx) {
  const tgId = String(ctx.from.id);
  if (!allowEvent(tgId)) {
    await ctx.reply("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ üôè");
    return false;
  }
  return true;
}

// –¢–∞–π–º–∞—É—Ç—ã OpenAI
async function withTimeout(promise, ms, onTimeoutMsg = "–¢–∞–π–º–∞—É—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.") {
  let to;
  const timeout = new Promise((_, rej) => to = setTimeout(() => rej(new Error("TIMEOUT")), ms));
  try {
    const res = await Promise.race([promise, timeout]);
    clearTimeout(to); 
    return res;
  } catch (e) {
    clearTimeout(to); 
    throw new Error(onTimeoutMsg);
  }
}

// –•–µ–ª–ø–µ—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OGG –≤ WAV
async function oggToWav(inputPath, outputPath) {
  return new Promise((resolve, reject) => {
    ffmpeg(inputPath)
      .audioCodec("pcm_s16le")
      .format("wav")
      .on("end", () => resolve(outputPath))
      .on("error", reject)
      .save(outputPath);
  });
}

// –•–µ–ª–ø–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ
async function transcribeAudio(filePath) {
  const file = fs.createReadStream(filePath);
  const resp = await openai.audio.transcriptions.create({
    file,
    model: "whisper-1",
    language: "ru"
  });
  return resp.text?.trim() || "";
}

// –•–µ–ª–ø–µ—Ä: —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ data URL
async function downloadPhotoAsDataUrl(api, fileId) {
  const file = await api.getFile(fileId);
  const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
  const res = await fetch(fileUrl);
  const buf = Buffer.from(await res.arrayBuffer());
  const base64 = buf.toString("base64");
  // –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ–æ—Ç–æ -> jpeg
  return `data:image/jpeg;base64,${base64}`;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–Ω—è
async function checkDayTriggers(ctx, text) {
  const tgId = String(ctx.from.id);
  
  if (text === '–∏—Ç–æ–≥ –∑–∞ –≤—á–µ—Ä–∞' || text === '–∏—Ç–æ–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è') {
    try {
      const userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [tgId]);
      if (userResult.rows.length === 0) {
        await ctx.reply("–ï—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ.");
        return true;
      }
      const userId = userResult.rows[0].id;
      
      const dateInfo = text === '–∏—Ç–æ–≥ –∑–∞ –≤—á–µ—Ä–∞' ? resolveDayToken('–≤—á–µ—Ä–∞') : null;
      const result = await renderDayTotals(userId, dateInfo);
      await ctx.reply(result.message);
      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ—Ä–∞–∑—ã-—Ç—Ä–∏–≥–≥–µ—Ä–∞:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      return true;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—É "–∏—Ç–æ–≥ –∑–∞ DD.MM.YYYY"
  const dateMatch = text.match(/^–∏—Ç–æ–≥ –∑–∞ (\d{2}\.\d{2}\.\d{4})$/);
  if (dateMatch) {
    try {
      const userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [tgId]);
      if (userResult.rows.length === 0) {
        await ctx.reply("–ï—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ.");
        return true;
      }
      const userId = userResult.rows[0].id;
      
      const dateInfo = resolveDayToken(dateMatch[1]);
      if (!dateInfo) {
        await ctx.reply("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä—ã: –∏—Ç–æ–≥ –∑–∞ 21.09.2025");
        return true;
      }
      
      const result = await renderDayTotals(userId, dateInfo);
      await ctx.reply(result.message);
      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ—Ä–∞–∑—ã-—Ç—Ä–∏–≥–≥–µ—Ä–∞:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      return true;
    }
  }
  
  return false;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –µ–¥—ã
async function handleFoodText(ctx, text) {
  const tz = "Europe/Warsaw";
  const tgId = String(ctx.from.id);

  try {
    // 1) –Ω–∞–π—Ç–∏/—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [tgId]);
    if (userResult.rows.length === 0) {
      userResult = await client.query('INSERT INTO "User" ("tgId") VALUES ($1) RETURNING id', [tgId]);
    }
    const userId = userResult.rows[0].id;

    // 2) –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
    const entryResult = await client.query(
      'INSERT INTO "FoodEntry" ("userId", date, "textRaw", "createdAt") VALUES ($1, $2, $3, $4) RETURNING id',
      [userId, new Date(), text, new Date()]
    );
    const entryId = entryResult.rows[0].id;

    // 3) –ø–∞—Ä—Å–∏–Ω–≥ LLM —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const items = await withTimeout(parseFoodTextStructured(text, tz), 8000, "–°–µ—Ä–≤–∏—Å—ã –¥—É–º–∞—é—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—á–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.");

    // 4) —Ä–∞—Å—á—ë—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
    let total = { kcal: 0, p: 0, f: 0, c: 0, fiber: 0 };
    for (const it of items) {
      const grams = resolveGrams({
        qty: it.qty,
        unit: it.unit,
        density: it.density_g_per_ml ?? null,
        pieceGrams: it.default_piece_grams ?? null,
      });
      const m = macrosFromPer100g(grams, it.per100g);
      total.kcal += m.kcal; 
      total.p += m.p; 
      total.f += m.f;
      total.c += m.c; 
      total.fiber += m.fiber;

      await client.query(
        `INSERT INTO food_items(entry_id, name, qty, unit, resolved_grams, kcal, p, f, c, fiber, edited_by_user, created_at)
         VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, false, now())`,
        [entryId, it.name, it.qty, it.unit, grams, m.kcal, m.p, m.f, m.c, m.fiber]
      );
    }

    const lines = items.map(i => `‚Ä¢ ${i.name}: ${i.qty} ${i.unit}`).join("\n");
    const sum = `–ò—Ç–æ–≥–æ: ${Math.round(total.kcal)} –∫–∫–∞–ª | –ë ${total.p.toFixed(1)} | –ñ ${total.f.toFixed(1)} | –£ ${total.c.toFixed(1)} | –ö–ª ${total.fiber.toFixed(1)}`;

    // 5) inline-–∫–Ω–æ–ø–∫–∏
    const kb = new InlineKeyboard()
      .text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞–º–º—ã", `edit:${entryId}`)
      .row()
      .text("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –≤—á–µ—Ä–∞", `mv_y:${entryId}`)
      .text("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", `del:${entryId}`)
      .row()
      .text("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", "coach:new");

    await ctx.reply(`–î–æ–±–∞–≤–∏–ª (–∏–∑ —Ç–µ–∫—Å—Ç–∞/–≥–æ–ª–æ—Å–∞):\n${lines}\n${sum}`, { reply_markup: kb });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleFoodText:", e);
    await ctx.reply("–ó–∞–ø–æ–º–Ω–∏–ª, –Ω–æ –±–µ–∑ —Ä–∞—Å—á—ë—Ç–æ–≤ (—Ç–µ—Ö. –ø–∞—É–∑–∞). /day ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞ –¥–µ–Ω—å.");
  }
}

// –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç
function resolveDayToken(token, tz = "Europe/Warsaw") {
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–æ–∫–µ–Ω
  const normalized = token.toLowerCase().trim();
  
  if (normalized === 'today' || normalized === '—Å–µ–≥–æ–¥–Ω—è') {
    const start = new Date(today);
    const end = new Date(today);
    end.setDate(end.getDate() + 1);
    return {
      start: start.toISOString().split('T')[0],
      end: end.toISOString().split('T')[0],
      title: '—Å–µ–≥–æ–¥–Ω—è'
    };
  }
  
  if (normalized === 'yesterday' || normalized === '–≤—á–µ—Ä–∞') {
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    const start = new Date(yesterday);
    const end = new Date(yesterday);
    end.setDate(end.getDate() + 1);
    return {
      start: start.toISOString().split('T')[0],
      end: end.toISOString().split('T')[0],
      title: '–≤—á–µ—Ä–∞'
    };
  }
  
  // DD.MM.YYYY —Ñ–æ—Ä–º–∞—Ç
  const ddmmyyyy = normalized.match(/^(\d{1,2})\.(\d{1,2})\.(\d{4})$/);
  if (ddmmyyyy) {
    const [, day, month, year] = ddmmyyyy;
    const date = new Date(year, month - 1, day);
    if (date.getFullYear() == year && date.getMonth() == month - 1 && date.getDate() == day) {
      const start = new Date(date);
      const end = new Date(date);
      end.setDate(end.getDate() + 1);
      return {
        start: start.toISOString().split('T')[0],
        end: end.toISOString().split('T')[0],
        title: `${day.padStart(2, '0')}.${month.padStart(2, '0')}.${year}`
      };
    }
  }
  
  // YYYY-MM-DD —Ñ–æ—Ä–º–∞—Ç
  const yyyymmdd = normalized.match(/^(\d{4})-(\d{1,2})-(\d{1,2})$/);
  if (yyyymmdd) {
    const [, year, month, day] = yyyymmdd;
    const date = new Date(year, month - 1, day);
    if (date.getFullYear() == year && date.getMonth() == month - 1 && date.getDate() == day) {
      const start = new Date(date);
      const end = new Date(date);
      end.setDate(end.getDate() + 1);
      return {
        start: start.toISOString().split('T')[0],
        end: end.toISOString().split('T')[0],
        title: `${day.padStart(2, '0')}.${month.padStart(2, '0')}.${year}`
      };
    }
  }
  
  return null;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞
function coachStatusKeyboard(id) {
  return new InlineKeyboard()
    .text("–í —Ä–∞–±–æ—Ç—É", `cr:set:in_progress:${id}`)
    .text("–ì–æ—Ç–æ–≤–æ",   `cr:set:done:${id}`)
    .text("–û—Ç–∫–ª–æ–Ω–∏—Ç—å",`cr:set:rejected:${id}`);
}

async function renderDayTotals(userId, dateInfo = null) {
  try {
    let dateCondition, params, title;
    
    if (dateInfo) {
      dateCondition = `AND fe.date::date >= $2 AND fe.date::date < $3`;
      params = [userId, dateInfo.start, dateInfo.end];
      title = dateInfo.title;
    } else {
      dateCondition = `AND fe.date::date = CURRENT_DATE`;
      params = [userId];
      title = '—Å–µ–≥–æ–¥–Ω—è';
    }
    
    const entriesResult = await client.query(
      `SELECT fe.id as entry_id, fi.name, fi.kcal, fi.p, fi.f, fi.c, fi.fiber
       FROM "FoodEntry" fe
       JOIN food_items fi ON fi.entry_id = fe.id
       WHERE fe."userId" = $1 ${dateCondition}
       ORDER BY fe.id ASC, fi.id ASC`,
      params
    );
    
    if (entriesResult.rows.length === 0) {
      return { success: false, message: `–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ ${title}.` };
    }
    
    let total = { kcal: 0, p: 0, f: 0, c: 0, fiber: 0 };
    const lines = entriesResult.rows.map(r => {
      total.kcal += Number(r.kcal); 
      total.p += Number(r.p);
      total.f += Number(r.f); 
      total.c += Number(r.c); 
      total.fiber += Number(r.fiber);
      return `‚Ä¢ ${r.name} ‚Äî ${Math.round(r.kcal)} –∫–∫–∞–ª | –ë ${r.p} | –ñ ${r.f} | –£ ${r.c} | –ö–ª ${r.fiber}`;
    }).join('\n');
    
    const totalLine = `\n\n–ò–¢–û–ì–û: ${Math.round(total.kcal)} –∫–∫–∞–ª | –ë ${total.p.toFixed(1)} | –ñ ${total.f.toFixed(1)} | –£ ${total.c.toFixed(1)} | –ö–ª ${total.fiber.toFixed(1)}`;
    
    return { success: true, message: `–ò—Ç–æ–≥ –∑–∞ ${title}:\n${lines}${totalLine}` };
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ –∏—Ç–æ–≥–æ–≤:", error);
    return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." };
  }
}

// –∫–æ–º–∞–Ω–¥–∞ /start
bot.command("start", (ctx) => {
  const kb = new InlineKeyboard()
    .text("–ü–æ–º–æ—â—å", "help")
    .row()
    .text("–ò—Ç–æ–≥ –¥–Ω—è", "day")
    .row()
    .text("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", "coach:new");
  return ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è. –ù–∞–ø–∏—à–∏: ¬´–æ–≤—Å—è–Ω–∫–∞ 60 –≥ + –º–æ–ª–æ–∫–æ 200 –º–ª¬ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.",
    { reply_markup: kb }
  );
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∑–∞ –¥–µ–Ω—å —Å –ö–ë–ñ–£
async function getDayEntries(userTgId) {
  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [userTgId]);
    
    if (userResult.rows.length === 0) {
      return { success: false, message: "–ï—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ." };
    }
    
    const userId = userResult.rows[0].id;
    return await renderDayTotals(userId);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:", error);
    return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." };
  }
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π
bot.on("callback_query:data", async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    const userId = String(ctx.from.id);
    
    if (data === "help") {
      await ctx.answerCallbackQuery({ text: "–ö–æ–º–∞–Ω–¥—ã: /start, –Ω–∞–ø–∏—à–∏ –µ–¥—É, /day." });
    } else if (data === "day") {
      const result = await getDayEntries(userId);
      
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (result.success && result.message.length > 200) {
        await ctx.answerCallbackQuery({ text: "–ü–æ–∫–∞–∑—ã–≤–∞—é –∏—Ç–æ–≥ –¥–Ω—è..." });
        await ctx.reply(result.message);
      } else {
        await ctx.answerCallbackQuery({ text: result.message });
      }
    } else if (data === "coach:new") {
      pendingCoach.set(userId, { step: 1, draft: {} });
      await ctx.answerCallbackQuery();
      return ctx.reply("–¶–µ–ª—å (—Å–±—Ä–æ—Å/–Ω–∞–±–æ—Ä/–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ) –∏ —Å—Ä–æ–∫? –ù–∞–ø–∏—à–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.");
    } else if (data.startsWith("cr:view:")) {
      const id = data.split(":")[2];
      if (String(ctx.from.id) !== process.env.TRAINER_TG_ID) {
        await ctx.answerCallbackQuery({ text: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert: true });
        return;
      }

      try {
        const { rows } = await client.query(
          `SELECT id, user_tg_id, user_id, goal, constraints, stats, contact, status, created_at
           FROM coach_requests WHERE id=$1`, [id]
        );
        
        if (!rows.length) {
          await ctx.answerCallbackQuery({ text: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert: true });
          return;
        }
        
        const r = rows[0];
        const text =
          `üìù –ó–∞—è–≤–∫–∞ #${r.id} (${r.status})\n` +
          `–û—Ç: tg ${r.user_tg_id}\n` +
          `–î–∞—Ç–∞: ${new Date(r.created_at).toLocaleString("ru-RU")}\n\n` +
          `–¶–µ–ª—å: ${r.goal}\n` +
          `–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${r.constraints || "‚Äî"}\n` +
          `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${r.stats || "‚Äî"}\n` +
          `–ö–æ–Ω—Ç–∞–∫—Ç: ${r.contact}`;

        await ctx.editMessageText(text, { reply_markup: coachStatusKeyboard(id) });
        await ctx.answerCallbackQuery();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–∫–∏:", error);
        await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–∫–∏", show_alert: true });
      }
    } else if (data.startsWith("cr:set:")) {
      const parts = data.split(":");
      if (parts.length >= 4) {
        const newStatus = parts[2];
        const id = parts[3];
        
        if (String(ctx.from.id) !== process.env.TRAINER_TG_ID) {
          await ctx.answerCallbackQuery({ text: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert: true });
          return;
        }
        
        const allowed = ["new","in_progress","done","rejected"];
        if (!allowed.includes(newStatus)) {
          await ctx.answerCallbackQuery({ text: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å", show_alert: true });
          return;
        }

        try {
          await client.query(`UPDATE coach_requests SET status=$1 WHERE id=$2`, [newStatus, id]);

          // –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
          const { rows } = await client.query(
            `SELECT id, user_tg_id, user_id, goal, constraints, stats, contact, status, created_at
             FROM coach_requests WHERE id=$1`, [id]
          );
          
          if (!rows.length) {
            await ctx.answerCallbackQuery({ text: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert: true });
            return;
          }

          const r = rows[0];
          const text =
            `üìù –ó–∞—è–≤–∫–∞ #${r.id} (${r.status})\n` +
            `–û—Ç: tg ${r.user_tg_id}\n` +
            `–î–∞—Ç–∞: ${new Date(r.created_at).toLocaleString("ru-RU")}\n\n` +
            `–¶–µ–ª—å: ${r.goal}\n` +
            `–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${r.constraints || "‚Äî"}\n` +
            `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${r.stats || "‚Äî"}\n` +
            `–ö–æ–Ω—Ç–∞–∫—Ç: ${r.contact}`;

          await ctx.editMessageText(text, { reply_markup: coachStatusKeyboard(id) });
          await ctx.answerCallbackQuery({ text: `–°—Ç–∞—Ç—É—Å: ${newStatus}` });
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞:", error);
          await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert: true });
        }
      }
    } else if (data.startsWith("edit:")) {
      // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const entryId = data.split(":")[1];
      const { rows: items } = await client.query(
        `SELECT id, name, resolved_grams FROM food_items WHERE entry_id=$1 ORDER BY id`, 
        [entryId]
      );
      
      if (!items.length) {
        await ctx.answerCallbackQuery({ text: "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π", show_alert: true });
        return;
      }

      const kb = new InlineKeyboard();
      items.forEach(it => kb.text(`${it.name} (${Math.round(it.resolved_grams)} –≥)`, `edititem:${it.id}`).row());
      await ctx.editMessageText("–í—ã–±–µ—Ä–∏ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞–º–º–æ–≤:", { reply_markup: kb });
      await ctx.answerCallbackQuery();
      
    } else if (data.startsWith("edititem:")) {
      // –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
      const itemId = data.split(":")[1];
      pendingGramEdit.set(userId, Number(itemId));
      await ctx.answerCallbackQuery();
      await ctx.reply("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≤ –≥—Ä–∞–º–º–∞—Ö), –Ω–∞–ø—Ä–∏–º–µ—Ä: 150");
      
    } else if (data.startsWith("mv_y:")) {
      // –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –≤—á–µ—Ä–∞
      const entryId = data.split(":")[1];
      await client.query(`UPDATE "FoodEntry" SET date = date - INTERVAL '1 day' WHERE id=$1`, [entryId]);
      await ctx.answerCallbackQuery({ text: "–ü–µ—Ä–µ–Ω—ë—Å –Ω–∞ –≤—á–µ—Ä–∞" });
      await ctx.reply("–ì–æ—Ç–æ–≤–æ: –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –≤—á–µ—Ä–∞.");
      
    } else if (data.startsWith("del:")) {
      // –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
      const entryId = data.split(":")[1];
      await client.query(`DELETE FROM "FoodEntry" WHERE id=$1`, [entryId]);
      await ctx.answerCallbackQuery({ text: "–£–¥–∞–ª–µ–Ω–æ" });
      await ctx.reply("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.");
      
    } else {
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
      await ctx.answerCallbackQuery({ text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞." });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ callback_query:", error);
    await ctx.answerCallbackQuery({ text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." });
  }
});

// –∫–æ–º–∞–Ω–¥–∞ /day
bot.command("day", async (ctx) => {
  const t0 = Date.now();
  
  try {
    const userTgId = String(ctx.from.id);
    const args = ctx.message.text.split(' ').slice(1).join(' ').trim();
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [userTgId]);
    if (userResult.rows.length === 0) {
      await ctx.reply("–ï—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ.");
      return;
    }
    const userId = userResult.rows[0].id;
    
    let result;
    if (!args) {
      // /day –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - —Å–µ–≥–æ–¥–Ω—è
      result = await renderDayTotals(userId);
    } else {
      // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
      const dateInfo = resolveDayToken(args);
      if (!dateInfo) {
        await ctx.reply("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä—ã: /day –≤—á–µ—Ä–∞, /day 21.09.2025");
        return;
      }
      result = await renderDayTotals(userId, dateInfo);
    }
    
    await ctx.reply(result.message);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /day:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "error", Date.now()-t0]);
  } finally {
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "day", Date.now()-t0]);
  }
});

// –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
bot.command("myid", async (ctx) => {
  await ctx.reply(`–í–∞—à Telegram ID: ${ctx.from.id}\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç ID –∏ –∑–∞–º–µ–Ω–∏—Ç–µ ADMIN_TG_ID –≤ .env —Ñ–∞–π–ª–µ –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä.`);
});

// –∫–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ /inbox
bot.command("inbox", async (ctx) => {
  if (String(ctx.from.id) !== process.env.TRAINER_TG_ID) return;

  try {
    const arg = (ctx.message.text.split(/\s+/)[1] || "new").toLowerCase();
    const allowed = ["new","in_progress","done","rejected"];
    const status = allowed.includes(arg) ? arg : "new";

    const { rows } = await client.query(
      `SELECT id, user_tg_id, goal, status, created_at
       FROM coach_requests
       WHERE status=$1
       ORDER BY created_at DESC
       LIMIT 10`, [status]
    );

    if (!rows.length) return ctx.reply(`–ó–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${status}" –Ω–µ—Ç ‚úÖ`);

    const lines = rows.map(r =>
      `#${r.id} ¬∑ ${new Date(r.created_at).toLocaleString("ru-RU")} ¬∑ [${r.status}] ¬∑ ${r.goal.slice(0,60)}`
    );

    const kb = new InlineKeyboard();
    rows.forEach(r => kb.text(`–û—Ç–∫—Ä—ã—Ç—å #${r.id}`, `cr:view:${r.id}`).row());

    await ctx.reply(`–ó–∞—è–≤–∫–∏ (${status}, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n${lines.join("\n")}`, { reply_markup: kb });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ /inbox:", error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.");
  }
});

// –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞ /mvpstats
bot.command("mvpstats", async (ctx) => {
  if (String(ctx.from.id) !== process.env.ADMIN_TG_ID) return;

  try {
    const { rows: dau } = await client.query(
      `SELECT COUNT(DISTINCT user_tg_id) AS dau
       FROM metrics_events WHERE created_at::date = CURRENT_DATE`
    );

    const { rows: byKind } = await client.query(
      `SELECT kind, COUNT(*) AS cnt
       FROM metrics_events
       WHERE created_at::date = CURRENT_DATE AND kind IN ('text','voice','photo')
       GROUP BY kind`
    );

    const { rows: lat } = await client.query(
      `SELECT kind, ROUND(AVG(latency_ms)) AS avg_ms, PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY latency_ms) AS p95_ms
       FROM metrics_events
       WHERE created_at::date = CURRENT_DATE AND kind IN ('text','voice','photo','day')
       GROUP BY kind`
    );

    const dauNum = dau[0]?.dau || 0;
    const kindLine = byKind.map(r => `${r.kind}: ${r.cnt}`).join(" ¬∑ ") || "–Ω–µ—Ç";
    const latLine = lat.map(r => `${r.kind}: avg ${r.avg_ms}–º—Å, p95 ${Math.round(r.p95_ms)}–º—Å`).join("\n") || "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö";

    await ctx.reply(
      `üìä MVP stats (—Å–µ–≥–æ–¥–Ω—è)\nDAU: ${dauNum}\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${kindLine}\n\n‚è± –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å:\n${latLine}`
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ /mvpstats:", error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
  }
});

// —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /parse
bot.command("parse", async (ctx) => {
  const text = ctx.message.text.replace(/^\/parse\s*/i, "").trim();
  if (!text) return ctx.reply("–ü—Ä–∏–º–µ—Ä: /parse –≤—á–µ—Ä–∞ 2 –∫—É—Å–∫–∞ –ø–∏—Ü—Ü—ã –∏ –∫–æ–ª–∞ 0.5 –≤ 20:00");

  try {
    const items = await parseFoodTextStructured(text, "Europe/Warsaw");
    const pretty = items.map(i =>
      `‚Ä¢ ${i.name}: ${i.qty} ${i.unit}` +
      (i.datetime ? ` @ ${i.datetime}` : ``) +
      ` | per100g kcal:${i.per100g.kcal}`
    ).join("\n");
    await ctx.reply(pretty || "–ü—É—Å—Ç–æ");
  } catch (e) {
    console.error(e);
    await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ —Å—Ö–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ñ—Ä–∞–∑—É.");
  }
});

// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message:voice", async (ctx) => {
  const t0 = Date.now();
  
  try {
    // Rate-limit –∑–∞—â–∏—Ç–∞
    if (!(await guardRate(ctx))) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–∞
    if ((ctx.message.voice?.duration || 0) > 60) {
      return ctx.reply("–ê—É–¥–∏–æ –¥–ª–∏–Ω–Ω–µ–µ 60 —Å–µ–∫. –°–∫–∞–∂–∏ –∫–æ—Ä–æ—á–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–º üôè");
    }
    await ctx.reply("–°–µ–∫—É–Ω–¥—É, —Ä–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å‚Ä¶");

    // 1) –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
    const file = await ctx.api.getFile(ctx.message.voice.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;

    // 2) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ wav
    const tmpDir = path.join(process.cwd(), "tmp");
    if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);
    const oggPath = path.join(tmpDir, `voice_${Date.now()}.oga`);
    const wavPath = path.join(tmpDir, `voice_${Date.now()}.wav`);

    const res = await fetch(fileUrl);
    const buf = Buffer.from(await res.arrayBuffer());
    fs.writeFileSync(oggPath, buf);

    await oggToWav(oggPath, wavPath);

    // 3) —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const text = await withTimeout(transcribeAudio(wavPath), 15000, "–°–µ—Ä–≤–∏—Å—ã –¥—É–º–∞—é—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—á–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.");
    
    // 4) —É–±–æ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    fs.unlink(oggPath, () => {});
    fs.unlink(wavPath, () => {});

    if (!text) {
      return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å —á—É—Ç—å —á—ë—Ç—á–µ –∏–ª–∏ –±–ª–∏–∂–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É.");
    }

    // 5) —Å—Ä–∞–∑—É –ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ –ø–∞–π–ø–ª–∞–π–Ω
    await handleFoodText(ctx, text);
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞:", e);
    await ctx.reply("–•–º–º, –Ω–µ –≤—ã—à–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º.");
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "error", Date.now()-t0]);
  } finally {
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "voice", Date.now()-t0]);
  }
});

// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
bot.on("message:photo", async (ctx) => {
  const t0 = Date.now();
  
  try {
    // Rate-limit –∑–∞—â–∏—Ç–∞
    if (!(await guardRate(ctx))) return;
    await ctx.reply("–°–µ–∫—É–Ω–¥—É, —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ñ–æ—Ç–æ‚Ä¶");

    const photos = ctx.message.photo; // –º–∞—Å—Å–∏–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤; –±–µ—Ä—ë–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä
    const chosen = photos[Math.max(0, photos.length - 2)]; // –Ω–µ —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π
    const dataUrl = await downloadPhotoAsDataUrl(ctx.api, chosen.file_id);
    const caption = ctx.message.caption?.trim() || ""; // –µ—Å–ª–∏ —é–∑–µ—Ä —á—Ç–æ-—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª

    const items = await withTimeout(parseFoodImageStructured(dataUrl, "Europe/Warsaw", caption), 15000, "–°–µ—Ä–≤–∏—Å—ã –¥—É–º–∞—é—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—á–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.");

    // –∫–∞–∫ –∏ –≤ —Ç–µ–∫—Å—Ç–µ/–≥–æ–ª–æ—Å–µ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∏ –ø–æ–∑–∏—Ü–∏–∏
    const tgId = String(ctx.from.id);
    let userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [tgId]);
    if (userResult.rows.length === 0) {
      userResult = await client.query('INSERT INTO "User" ("tgId") VALUES ($1) RETURNING id', [tgId]);
    }
    const userId = userResult.rows[0].id;

    const rawText = caption ? `[photo] ${caption}` : "[photo]";
    const entryResult = await client.query(
      'INSERT INTO "FoodEntry" ("userId", date, "textRaw", "createdAt") VALUES ($1, $2, $3, $4) RETURNING id',
      [userId, new Date(), rawText, new Date()]
    );
    const entryId = entryResult.rows[0].id;

    let total = { kcal: 0, p: 0, f: 0, c: 0, fiber: 0 };
    for (const it of items) {
      const grams = resolveGrams({
        qty: it.qty,
        unit: it.unit,
        density: it.density_g_per_ml ?? null,
        pieceGrams: it.default_piece_grams ?? null
      });
      const m = macrosFromPer100g(grams, it.per100g);
      total.kcal += m.kcal; 
      total.p += m.p; 
      total.f += m.f; 
      total.c += m.c; 
      total.fiber += m.fiber;

      await client.query(
        `INSERT INTO food_items(entry_id, name, qty, unit, resolved_grams, kcal, p, f, c, fiber, edited_by_user, created_at)
         VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, false, now())`,
        [entryId, it.name, it.qty, it.unit, grams, m.kcal, m.p, m.f, m.c, m.fiber]
      );
    }

    const lines = items.map(i => `‚Ä¢ ${i.name}: ${i.qty} ${i.unit}`).join("\n");
    const sum = `–ò—Ç–æ–≥–æ: ${Math.round(total.kcal)} –∫–∫–∞–ª | –ë ${total.p.toFixed(1)} | –ñ ${total.f.toFixed(1)} | –£ ${total.c.toFixed(1)} | –ö–ª ${total.fiber.toFixed(1)}`;

    const kb = new InlineKeyboard()
      .text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞–º–º—ã", `edit:${entryId}`)
      .row()
      .text("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –≤—á–µ—Ä–∞", `mv_y:${entryId}`)
      .text("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", `del:${entryId}`)
      .row()
      .text("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", "coach:new");

    await ctx.reply(`–î–æ–±–∞–≤–∏–ª (—Å —Ñ–æ—Ç–æ):\n${lines}\n${sum}`, { reply_markup: kb });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:", e);
    
    let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ –±–ª–∏–∂–µ –∏ –Ω–∞ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–æ–≤—Å—è–Ω–∫–∞ 60 –≥, –±–∞–Ω–∞–Ω 1 —à—Ç¬ª).";
    
    if (e.message.includes("–°–µ—Ä–≤–∏—Å—ã –¥—É–º–∞—é—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ")) {
      errorMessage = "–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ –±–ª–∏–∂–µ –∏ –Ω–∞ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–æ–≤—Å—è–Ω–∫–∞ 60 –≥, –±–∞–Ω–∞–Ω 1 —à—Ç¬ª).";
    } else if (e.message.includes("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ")) {
      errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ –±–ª–∏–∂–µ –∏ –Ω–∞ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–æ–≤—Å—è–Ω–∫–∞ 60 –≥, –±–∞–Ω–∞–Ω 1 —à—Ç¬ª).";
    } else if (e.message.includes("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Vision API")) {
      errorMessage = "–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–æ–≤—Å—è–Ω–∫–∞ 60 –≥, –±–∞–Ω–∞–Ω 1 —à—Ç¬ª).";
    }
    
    await ctx.reply(errorMessage);
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "error", Date.now()-t0]);
  } finally {
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "photo", Date.now()-t0]);
  }
});

// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∏ —Ä–∞—Å—á—ë—Ç–æ–º –ö–ë–ñ–£
bot.on("message:text", async (ctx) => {
  const t0 = Date.now();
  
  try {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    if (ctx.message.text.startsWith('/') && !ctx.message.text.includes(' ')) {
      return;
    }

    // Rate-limit –∑–∞—â–∏—Ç–∞
    if (!(await guardRate(ctx))) return;

  const text = ctx.message.text.trim();
  const userId = String(ctx.from.id);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ–º –ª–∏ –º—ã –∞–Ω–∫–µ—Ç—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
  const coachSession = pendingCoach.get(userId);
  if (coachSession) {
    if (coachSession.step === 1) {
      coachSession.draft.goal = text;
      coachSession.step = 2;
      return ctx.reply("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è/–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é?");
    }
    if (coachSession.step === 2) {
      coachSession.draft.constraints = text;
      coachSession.step = 3;
      return ctx.reply("–†–æ—Å—Ç/–≤–µ—Å/–≤–æ–∑—Ä–∞—Å—Ç ‚Äî –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:");
    }
    if (coachSession.step === 3) {
      coachSession.draft.stats = text;
      coachSession.step = 4;
      return ctx.reply("–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ–≥—Ä–∞–º @–Ω–∏–∫ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω):");
    }
    if (coachSession.step === 4) {
      coachSession.draft.contact = text;

      try {
        // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        const { rows: u } = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [userId]);
        const dbUserId = u[0]?.id || null;

        await client.query(
          `INSERT INTO coach_requests(user_tg_id, user_id, goal, constraints, stats, contact, status, created_at)
           VALUES($1, $2, $3, $4, $5, $6, 'new', now())`,
          [userId, dbUserId, coachSession.draft.goal, coachSession.draft.constraints, coachSession.draft.stats, coachSession.draft.contact]
        );

        // —É–≤–µ–¥–æ–º–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞
        const summary =
          `üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω\n` +
          `–û—Ç: tg ${userId}\n` +
          `–¶–µ–ª—å: ${coachSession.draft.goal}\n` +
          `–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${coachSession.draft.constraints}\n` +
          `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${coachSession.draft.stats}\n` +
          `–ö–æ–Ω—Ç–∞–∫—Ç: ${coachSession.draft.contact}\n` +
          `–î–∞—Ç–∞: ${new Date().toLocaleString("ru-RU")}`;

        if (process.env.TRAINER_TG_ID) {
          try { 
            await ctx.api.sendMessage(process.env.TRAINER_TG_ID, summary); 
          } catch(e) { 
            console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–Ω–µ—Ä—É:", e); 
          }
        }

        pendingCoach.delete(userId);
        return ctx.reply("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä—É ‚úÖ. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –ª–∏—á–∫–µ.");
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", error);
        pendingCoach.delete(userId);
        return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã –≥—Ä–∞–º–º—ã
  const editingItemId = pendingGramEdit.get(userId);
  if (editingItemId) {
    const grams = Number(String(text).replace(",", "."));
    if (!grams || grams <= 0) {
      await ctx.reply("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ > 0. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: 120");
      return;
    }

    try {
      // –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≥—Ä–∞–º–º—ã, —Å—á–∏—Ç–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
      const { rows } = await client.query(
        `SELECT entry_id, resolved_grams, kcal, p, f, c, fiber FROM food_items WHERE id=$1`, 
        [editingItemId]
      );
      
      if (!rows.length) { 
        pendingGramEdit.delete(userId); 
        await ctx.reply("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); 
        return; 
      }

      const it = rows[0];
      const k = grams / Number(it.resolved_grams);
      await client.query(
        `UPDATE food_items
         SET resolved_grams=$1,
             kcal=$2, p=$3, f=$4, c=$5, fiber=$6
         WHERE id=$7`,
        [grams,
         (it.kcal*k).toFixed(1), (it.p*k).toFixed(1), (it.f*k).toFixed(1), (it.c*k).toFixed(1), (it.fiber*k).toFixed(1),
         editingItemId]
      );

      pendingGramEdit.delete(userId);

      // –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const userResult = await client.query('SELECT id FROM "User" WHERE "tgId" = $1', [userId]);
      if (userResult.rows.length === 0) {
        await ctx.reply("–û–±–Ω–æ–≤–∏–ª. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
      }
      const dbUserId = userResult.rows[0].id;

      // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥ –∑–∞ –¥–µ–Ω—å
      const result = await renderDayTotals(dbUserId);
      const totalText = result.success ? result.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤";
      await ctx.reply(`–û–±–Ω–æ–≤–∏–ª. ${totalText}`);
      
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞–º–º–æ–≤:", error);
      pendingGramEdit.delete(userId);
      await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–Ω—è
  if (await checkDayTriggers(ctx, text)) {
    return;
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –µ–¥—ã
  await handleFoodText(ctx, text);
  
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–∞:", e);
    await ctx.reply("–•–º–º, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.");
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "error", Date.now()-t0]);
    return;
  } finally {
    await client.query(`INSERT INTO metrics_events(user_tg_id, kind, latency_ms, created_at)
                        VALUES($1,$2,$3, now())`, [String(ctx.from.id), "text", Date.now()-t0]);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", err);
});

bot.start();
console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...");